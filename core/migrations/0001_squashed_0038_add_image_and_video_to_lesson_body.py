# Generated by Django 2.2.19 on 2021-03-09 12:05

import django.db.models.deletion
import django_extensions.db.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.images.blocks
import wagtail.images.models
import wagtail.search.index
from django.conf import settings
from django.db import migrations, models

import core.blocks
import core.mixins
import core.models

# DELIBERATELY OMITTED as part of controlled removal of the app
# import wagtail_personalisation.blocks
# import wagtail_personalisation.models


class Migration(migrations.Migration):

    replaces = [
        ('core', '0001_initial'),
        ('core', '0002_tour_tourstep'),
        ('core', '0003_auto_20200312_1655'),
        ('core', '0004_country_product'),
        (
            'core',
            '0005_matchcountryquerystring_matchfirstcountryofinterestrule_matchproductquerystring_personalisedpage',
        ),
        ('core', '0006_auto_20200323_1413'),
        ('core', '0007_auto_20200407_1252'),
        ('core', '0008_auto_20200408_0851'),
        ('core', '0009_auto_20200423_1531'),
        ('core', '0010_homepage'),
        ('core', '0011_auto_20200504_1408'),
        ('core', '0012_auto_20200514_1414'),
        ('core', '0013_auto_20200520_0835'),
        ('core', '0014_auto_20200611_1452'),
        ('core', '0015_auto_20200623_1414'),
        ('core', '0016_detailpage_estimated_read_duration'),
        ('core', '0017_detailpage_objective'),
        ('core', '0018_detailpage_step_by_step'),
        ('core', '0019_genericlandingpage'),
        ('core', '0020_auto_20200819_0834'),
        ('core', '0021_detailpage_image'),
        ('core', '0022_detailpage_recap'),
        ('core', '0023_auto_20200828_1248'),
        ('core', '0024_auto_20200828_1613'),
        ('core', '0025_auto_20200901_1017'),
        ('core', '0026_auto_20200901_1410'),
        ('core', '0027_auto_20200902_1446'),
        ('core', '0028_auto_20200902_1546'),
        ('core', '0029_auto_20200903_1506'),
        ('core', '0030_auto_20200904_1233'),
        ('core', '0031_auto_20200907_1046'),
        ('core', '0032_auto_20200907_1802'),
        ('core', '0032_auto_20200908_1151'),
        ('core', '0033_greatmedia'),
        ('core', '0034_add_choose_do_not_choose_block_to_detail_page'),
        ('core', '0035_add_case_study_and_tags'),
        ('core', '0036_change_content_module_to_case_study_on_detail_page'),
        ('core', '0037_greatmedia_transcript_mandatory'),
        ('core', '0038_add_image_and_video_to_lesson_body'),
    ]

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailmedia', '0003_copy_media_permissions_to_collections'),
        # ('wagtail_personalisation', '0025_auto_20190822_0627'),
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailredirects', '0006_redirect_increase_max_length'),
        ('wagtaildocs', '0010_document_file_hash'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('wagtailforms', '0004_add_verbose_name_plural'),
        ('wagtailimages', '0001_squashed_0021'),
    ]

    operations = [
        migrations.CreateModel(
            name='AltTextImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                (
                    'file',
                    models.ImageField(
                        height_field='height',
                        upload_to=wagtail.images.models.get_upload_to,
                        verbose_name='file',
                        width_field='width',
                    ),
                ),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, editable=False, max_length=40)),
                ('alt_text', models.CharField(blank=True, max_length=255)),
                (
                    'collection',
                    models.ForeignKey(
                        default=wagtail.core.models.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailcore.Collection',
                        verbose_name='collection',
                    ),
                ),
                (
                    'tags',
                    taggit.managers.TaggableManager(
                        blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags'
                    ),
                ),
                (
                    'uploaded_by_user',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='uploaded by user',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ImageHash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_hash', models.CharField(max_length=1000)),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailimages.Image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentHash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_hash', models.CharField(max_length=1000)),
                (
                    'document',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtaildocs.Document',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                (
                    'file',
                    models.ImageField(
                        height_field='height',
                        upload_to=wagtail.images.models.get_rendition_upload_to,
                        width_field='width',
                    ),
                ),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                (
                    'image',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='core.AltTextImage'
                    ),
                ),
            ],
            options={
                'unique_together': {('image', 'filter_spec', 'focal_point_key')},
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('body', models.CharField(max_length=255)),
                ('button_text', models.CharField(max_length=255)),
                (
                    'page',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name='tour', to='wagtailcore.Page'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TourStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=255)),
                ('body', models.CharField(max_length=255)),
                ('position', models.CharField(max_length=255)),
                ('selector', models.CharField(max_length=255)),
                (
                    'tour',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='core.Tour'
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL - core.0053 has corresponding skips made, too
        # migrations.CreateModel(
        #     name='MatchProductExpertise',
        #     fields=[
        #         ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        #         ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Product')),
        #         # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
        #         # (
        #         #     'segment',
        #         #     modelcluster.fields.ParentalKey(
        #         #         on_delete=django.db.models.deletion.CASCADE,
        #         #         related_name='core_matchproductexpertises',
        #         #         to='wagtail_personalisation.Segment',
        #         #     ),
        #         # ),
        #     ],
        #     options={
        #         'verbose_name': 'Match product rule',
        #     },
        # ),
        # migrations.CreateModel(
        #     name='MatchFirstCountryOfInterestRule',
        #     fields=[
        #         ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        #         ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country')),
        #         # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
        #         # (
        #         #     'segment',
        #         #     modelcluster.fields.ParentalKey(
        #         #         on_delete=django.db.models.deletion.CASCADE,
        #         #         related_name='core_matchfirstcountryofinterestrules',
        #         #         to='wagtail_personalisation.Segment',
        #         #     ),
        #         # ),
        #     ],
        #     options={
        #         'verbose_name': 'Match first country of interest rule',
        #     },
        # ),
        # migrations.CreateModel(
        #     name='MatchCountryQuerystring',
        #     fields=[
        #         ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        #         ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country')),
        #         # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
        #         # (
        #         #     'segment',
        #         #     modelcluster.fields.ParentalKey(
        #         #         on_delete=django.db.models.deletion.CASCADE,
        #         #         related_name='core_matchcountryquerystrings',
        #         #         to='wagtail_personalisation.Segment',
        #         #     ),
        #         # ),
        #     ],
        #     options={
        #         'verbose_name': 'Match country rule',
        #     },
        # ),
        # migrations.CreateModel(
        #     name='MatchFirstIndustryOfInterestRule',
        #     fields=[
        #         ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        #         (
        #             'industry',
        #             models.TextField(
        #                 choices=[
        #                     ('SL10001', 'Advanced Engineering'),
        #                     ('SL10002', 'Aerospace'),
        #                     ('SL10003', 'Agriculture, Horticulture and Fisheries'),
        #                     ('SL10004', 'Airports'),
        #                     ('SL10005', 'Automotive'),
        #                     ('SL10006', 'Biotechnology & Pharmaceuticals'),
        #                     ('SL10007', 'Chemicals'),
        #                     ('SL10008', 'Construction'),
        #                     ('SL10009', 'Consumer, Retail and Luxury'),
        #                     ('SL10010', 'Creative and Media'),
        #                     ('SL10011', 'Cyber Security'),
        #                     ('SL10012', 'Defence'),
        #                     ('SL10013', 'Education & Training'),
        #                     ('SL10014', 'Energy'),
        #                     ('SL10015', 'Environment'),
        #                     ('SL10016', 'Financial & Professional Services'),
        #                     ('SL10017', 'Food & Drink'),
        #                     ('SL10018', 'Healthcare & Medical'),
        #                     ('SL10019', 'Leisure & Tourism'),
        #                     ('SL10020', 'Life Sciences'),
        #                     ('SL10021', 'Maritme'),
        #                     ('SL10022', 'Mining'),
        #                     ('SL10023', 'Railways'),
        #                     ('SL10024', 'Security'),
        #                     ('SL10025', 'Space'),
        #                     ('SL10026', 'Sports Economy'),
        #                     ('SL10027', 'Technology & Smart Cities'),
        #                     ('SL10028', 'Water'),
        #                 ]
        #             ),
        #         ),
        #         # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
        #         # (
        #         #     'segment',
        #         #     modelcluster.fields.ParentalKey(
        #         #         on_delete=django.db.models.deletion.CASCADE,
        #         #         related_name='core_matchfirstindustryofinterestrules',
        #         #         to='wagtail_personalisation.Segment',
        #         #     ),
        #         # ),
        #     ],
        #     options={
        #         'verbose_name': 'Match first industry of interest rule',
        #     },
        # ),
        migrations.CreateModel(
            name='DetailPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.Page',
                    ),
                ),
                (
                    'body',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'paragraph',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                                        # (
                                        #     'segment',
                                        #     wagtail.core.blocks.ChoiceBlock(
                                        #         choices=wagtail_personalisation.blocks.list_segment_choices,
                                        #         help_text='Only show this content block for users in this segment',
                                        #         label='Personalisation segment',
                                        #         required=False,
                                        #     ),
                                        # ),
                                        ('paragraph', wagtail.core.blocks.RichTextBlock()),
                                    ],
                                    icon='fa-font',
                                    template='core/personalised_page_struct_paragraph_block.html',
                                ),
                            ),
                            (
                                'video',
                                wagtail.core.blocks.StructBlock(
                                    [('video', core.blocks.MediaChooserBlock())],
                                    help_text='Video displayed within a full-page-width block',
                                    template='core/includes/_video_full_width.html',
                                ),
                            ),
                            ('case_study', core.blocks.CaseStudyStaticBlock(icon='fa-book')),
                            (
                                'Step',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('title', wagtail.core.blocks.CharBlock(max_length=255)),
                                        ('body', wagtail.core.blocks.RichTextBlock()),
                                        ('image', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ],
                                    icon='cog',
                                ),
                            ),
                            (
                                'fictional_example',
                                wagtail.core.blocks.StructBlock(
                                    [('fiction_body', wagtail.core.blocks.RichTextBlock(icon='openquote'))],
                                    icon='fa-commenting-o',
                                    template='learn/fictional_company_example.html',
                                ),
                            ),
                            (
                                'ITA_Quote',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('quote', wagtail.core.blocks.RichTextBlock()),
                                        ('author', wagtail.core.blocks.CharBlock(max_length=255)),
                                    ],
                                    icon='fa-quote-left',
                                ),
                            ),
                            (
                                'pros_cons',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            'pros',
                                            wagtail.core.blocks.StreamBlock(
                                                [
                                                    (
                                                        'item',
                                                        wagtail.core.blocks.StructBlock(
                                                            [('item', wagtail.core.blocks.CharBlock(max_length=255))],
                                                            icon='fa-arrow-right',
                                                        ),
                                                    )
                                                ]
                                            ),
                                        ),
                                        (
                                            'cons',
                                            wagtail.core.blocks.StreamBlock(
                                                [
                                                    (
                                                        'item',
                                                        wagtail.core.blocks.StructBlock(
                                                            [('item', wagtail.core.blocks.CharBlock(max_length=255))],
                                                            icon='fa-arrow-right',
                                                        ),
                                                    )
                                                ]
                                            ),
                                        ),
                                    ],
                                    icon='fa-arrow-right',
                                    template='learn/pros_and_cons.html',
                                ),
                            ),
                            (
                                'choose_do_not_choose',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('choose_title', wagtail.core.blocks.CharBlock(max_length=255)),
                                        ('choose_body', wagtail.core.blocks.RichTextBlock(features=())),
                                        ('do_not_choose_title', wagtail.core.blocks.CharBlock(max_length=255)),
                                        ('do_not_choose_body', wagtail.core.blocks.RichTextBlock(features=())),
                                    ]
                                ),
                            ),
                            (
                                'image',
                                core.blocks.ImageBlock(
                                    help_text='Image displayed within a full-page-width block',
                                    template='core/includes/_image_full_width.html',
                                ),
                            ),
                        ]
                    ),
                ),
                ('template', models.CharField(default='', max_length=255)),
                ('estimated_read_duration', models.DurationField(blank=True, null=True)),
                (
                    'objective',
                    wagtail.core.fields.StreamField(
                        [
                            ('paragraph', wagtail.core.blocks.RichTextBlock(options={'class': 'objectives'})),
                            (
                                'ListItem',
                                wagtail.core.blocks.StructBlock(
                                    [('item', wagtail.core.blocks.CharBlock(max_length=255))]
                                ),
                            ),
                        ],
                        default=None,
                    ),
                ),
                (
                    'recap',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'recap_item',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('title', wagtail.core.blocks.CharBlock(icon='fa-header')),
                                        (
                                            'item',
                                            wagtail.core.blocks.StreamBlock(
                                                [
                                                    (
                                                        'item',
                                                        wagtail.core.blocks.StructBlock(
                                                            [('item', wagtail.core.blocks.CharBlock(max_length=255))]
                                                        ),
                                                    )
                                                ]
                                            ),
                                        ),
                                    ],
                                    icon='fa-commenting-o',
                                    template='learn/recap.html',
                                ),
                            )
                        ]
                    ),
                ),
                (
                    'hero',
                    wagtail.core.fields.StreamField(
                        [
                            ('Image', core.blocks.ImageBlock(template='core/includes/_hero_image.html')),
                            (
                                'Video',
                                wagtail.core.blocks.StructBlock(
                                    [('video', core.blocks.MediaChooserBlock())],
                                    template='core/includes/_hero_video.html',
                                ),
                            ),
                        ],
                        null=True,
                        validators=[core.models.hero_singular_validation],
                    ),
                ),
                ('topic_block_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Personalisable detail page',
                'verbose_name_plural': 'Personalisable detail pages',
            },
            bases=(
                # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                # wagtail_personalisation.models.PersonalisablePageMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='ListPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.Page',
                    ),
                ),
                ('template', models.CharField(max_length=255)),
                ('button_label', models.CharField(default='', max_length=100)),
                ('description', wagtail.core.fields.RichTextField(default='')),
                (
                    'record_read_progress',
                    models.BooleanField(
                        default=False, help_text='Should we record when a user views a page in this collection?'
                    ),
                ),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Automated list page',
                'verbose_name_plural': 'Automated list pages',
            },
            bases=(
                # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                # wagtail_personalisation.models.PersonalisablePageMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='CuratedListPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.Page',
                    ),
                ),
                ('template', models.CharField(max_length=255)),
                ('heading', wagtail.core.fields.RichTextField()),
                (
                    'topics',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'topic',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('title', wagtail.core.blocks.CharBlock(max_length=255)),
                                        (
                                            'pages',
                                            wagtail.core.blocks.ListBlock(
                                                wagtail.core.blocks.PageChooserBlock(label='Detail page')
                                            ),
                                        ),
                                    ],
                                    icon='plus',
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='core.AltTextImage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(
                # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                # wagtail_personalisation.models.PersonalisablePageMixin,
                core.mixins.EnableTourMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='InterstitialPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.Page',
                    ),
                ),
                ('template', models.CharField(max_length=255)),
                (
                    'button',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'button',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('label', wagtail.core.blocks.CharBlock(max_length=255)),
                                        (
                                            'link',
                                            wagtail.core.blocks.StructBlock(
                                                [
                                                    (
                                                        'internal_link',
                                                        wagtail.core.blocks.PageChooserBlock(
                                                            label='Internal link', required=False
                                                        ),
                                                    ),
                                                    (
                                                        'external_link',
                                                        wagtail.core.blocks.CharBlock(
                                                            label='External link', max_length=255, required=False
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    icon='cog',
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(
                # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                # wagtail_personalisation.models.PersonalisablePageMixin,
                core.mixins.EnableTourMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='ContentModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', wagtail.core.fields.RichTextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, null=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, null=True, verbose_name='modified'
                    ),
                ),
                ('sso_id', models.TextField()),
                (
                    'list_page',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='page_views_list', to='core.ListPage'
                    ),
                ),
                (
                    'page',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='page_views', to='core.DetailPage'
                    ),
                ),
            ],
            options={
                'ordering': ['page__pk'],
                'unique_together': {('page', 'sso_id')},
            },
        ),
        migrations.CreateModel(
            name='ContentModuleTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tagged_items',
                        to='core.ContentModule',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='core_contentmoduletag_items',
                        to='taggit.Tag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contentmodule',
            name='tags',
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='core.ContentModuleTag',
                to='taggit.Tag',
                verbose_name='Tags',
            ),
        ),
        migrations.CreateModel(
            name='LandingPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.Page',
                    ),
                ),
                ('template', models.CharField(max_length=255)),
                ('description', wagtail.core.fields.RichTextField()),
                (
                    'button',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'button',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ('label', wagtail.core.blocks.CharBlock(max_length=255)),
                                        (
                                            'link',
                                            wagtail.core.blocks.StructBlock(
                                                [
                                                    (
                                                        'internal_link',
                                                        wagtail.core.blocks.PageChooserBlock(
                                                            label='Internal link', required=False
                                                        ),
                                                    ),
                                                    (
                                                        'external_link',
                                                        wagtail.core.blocks.CharBlock(
                                                            label='External link', max_length=255, required=False
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    icon='cog',
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='core.AltTextImage',
                    ),
                ),
                (
                    'body',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'section',
                                wagtail.core.blocks.StreamBlock(
                                    [
                                        ('title', core.blocks.TitleBlock()),
                                        (
                                            'text_block',
                                            wagtail.core.blocks.RichTextBlock(
                                                helptext='Add a textblock', icon='openquote'
                                            ),
                                        ),
                                        ('image', core.blocks.ImageBlock()),
                                        ('hr', core.blocks.HrBlock()),
                                        (
                                            'side_link',
                                            wagtail.core.blocks.StructBlock(
                                                [
                                                    (
                                                        'link',
                                                        wagtail.core.blocks.StructBlock(
                                                            [
                                                                (
                                                                    'internal_link',
                                                                    wagtail.core.blocks.PageChooserBlock(
                                                                        label='Internal link', required=False
                                                                    ),
                                                                ),
                                                                (
                                                                    'external_link',
                                                                    wagtail.core.blocks.CharBlock(
                                                                        label='External link',
                                                                        max_length=255,
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ],
                                                            required=True,
                                                        ),
                                                    ),
                                                    (
                                                        'title_override',
                                                        wagtail.core.blocks.CharBlock(max_length=255, required=False),
                                                    ),
                                                    (
                                                        'lede_override',
                                                        wagtail.core.blocks.CharBlock(max_length=255, required=False),
                                                    ),
                                                ]
                                            ),
                                        ),
                                        ('target_table', core.blocks.ComponentTargetTable()),
                                    ]
                                ),
                            ),
                            ('title', core.blocks.TitleBlock()),
                            ('text', wagtail.core.blocks.RichTextBlock(helptext='Add a textblock', icon='openquote')),
                            ('image', core.blocks.ImageBlock()),
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    'components',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'route',
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            'route_type',
                                            wagtail.core.blocks.ChoiceBlock(
                                                choices=[
                                                    ('learn', 'Learning'),
                                                    ('plan', 'Export plan'),
                                                    ('target', 'Target market'),
                                                ],
                                                icon='redirect',
                                            ),
                                        ),
                                        ('title', wagtail.core.blocks.CharBlock(max_length=255)),
                                        ('body', wagtail.core.blocks.TextBlock(max_length=4096)),
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'button',
                                            wagtail.core.blocks.StructBlock(
                                                [
                                                    ('label', wagtail.core.blocks.CharBlock(max_length=255)),
                                                    (
                                                        'link',
                                                        wagtail.core.blocks.StructBlock(
                                                            [
                                                                (
                                                                    'internal_link',
                                                                    wagtail.core.blocks.PageChooserBlock(
                                                                        label='Internal link', required=False
                                                                    ),
                                                                ),
                                                                (
                                                                    'external_link',
                                                                    wagtail.core.blocks.CharBlock(
                                                                        label='External link',
                                                                        max_length=255,
                                                                        required=False,
                                                                    ),
                                                                ),
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ],
                                                icon='cog',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(
                # DELIBERATELY OMITTED AS PART OF CONTROLLED REMOVAL
                # wagtail_personalisation.models.PersonalisablePageMixin,
                core.mixins.EnableTourMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('summary', models.TextField()),
                (
                    'body',
                    wagtail.core.fields.StreamField(
                        [
                            (
                                'media',
                                wagtail.core.blocks.StreamBlock(
                                    [
                                        (
                                            'video',
                                            wagtail.core.blocks.StructBlock(
                                                [('video', core.blocks.MediaChooserBlock())],
                                                template='core/includes/_case_study_video.html',
                                            ),
                                        ),
                                        ('image', core.blocks.ImageBlock()),
                                    ],
                                    max_num=2,
                                    min_num=1,
                                ),
                            ),
                            ('text', wagtail.core.blocks.RichTextBlock(features=())),
                        ],
                        help_text='This block must contain one Media section (with one or two items in it) and one Text section.',
                        validators=[core.models.case_study_body_validation],
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, null=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, null=True, verbose_name='modified'
                    ),
                ),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'verbose_name_plural': 'Case studies',
            },
        ),
        migrations.CreateModel(
            name='PersonalisationCountryTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Country tag for personalisation',
                'verbose_name_plural': 'Country tags for personalisation',
            },
        ),
        migrations.CreateModel(
            name='PersonalisationHSCodeTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'HS Code tag for personalisation',
                'verbose_name_plural': 'HS Code tags for personalisation',
            },
        ),
        migrations.CreateModel(
            name='HSCodeTaggedCaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='hs_code_tagged_items',
                        to='core.CaseStudy',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='hscode_tagged_case_studies',
                        to='core.PersonalisationHSCodeTag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryTaggedCaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='country_tagged_items',
                        to='core.CaseStudy',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='country_tagged_case_studies',
                        to='core.PersonalisationCountryTag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='casestudy',
            name='country_code_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='core.CountryTaggedCaseStudy',
                to='core.PersonalisationCountryTag',
                verbose_name='Country tags',
            ),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='hs_code_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='core.HSCodeTaggedCaseStudy',
                to='core.PersonalisationHSCodeTag',
                verbose_name='HS-code tags',
            ),
        ),
        migrations.CreateModel(
            name='GreatMedia',
            fields=[
                (
                    'media_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailmedia.Media',
                    ),
                ),
                ('transcript', models.TextField(null=True, verbose_name='Transcript')),
            ],
            options={
                'verbose_name': 'media',
                'abstract': False,
            },
            bases=('wagtailmedia.media',),
        ),
    ]
