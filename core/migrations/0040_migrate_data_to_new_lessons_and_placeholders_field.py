# Generated by Django 2.2.14 on 2020-10-14 11:41
import logging

import json

from importlib import import_module
from django.db import migrations

logger = logging.getLogger(__name__)


LESSONS_AND_PLACEHOLDERS_KEY = 'lessons_and_placeholders'

def forwards(apps, schema_editor):
    # real model needed so we have the methods
    CuratedListPage = import_module('core.models').CuratedListPage

    # for every CuratedListPage
    for page in CuratedListPage.objects.all():
        page_json = json.loads(page.to_json())

        # for every CuratedTopicBlock (`topic`) in page.topics (a streamfield)
        page_topics_json = json.loads(page_json['topics'])
        for topic_json in page_topics_json:
            # for every page in that `topic`'s `pages` ListBlock
            # add it, as a `lesson` value-dict, to the
            # lessons_and_placeholders StreamBlock
            if 'pages' in topic_json['value']:
                for page_id in topic_json['value']['pages']:
                    lesson_dict = {
                        'type': 'lesson',
                        'value': page_id,
                        # no ID specified - automatically done later by Wagtail
                    }

                    # For some reason some pages may not have this key set, possibly
                    # because they have no topics at all
                    if LESSONS_AND_PLACEHOLDERS_KEY not in topic_json['value']:
                        topic_json['value'][LESSONS_AND_PLACEHOLDERS_KEY] = []

                    topic_json['value']['lessons_and_placeholders'].append(lesson_dict)

                # ALSO drop the old 'pages' value, which is now redundant, but
                # would be confusing to still see in the DB and would mask any
                # oversights in the refactor from 'pages' to 'lessons_and_placeholders'
                del topic_json['value']['pages']

        # Now re-insert the stringified topic data back into the page
        page_json['topics'] = json.dumps(page_topics_json)

        logger.info(f"Creating new revision of page {page.id}")
        new_revision = page.revisions.create(
            content_json=json.dumps(page_json)
        )
        if page.live:
            new_revision.publish()

        old_revisions = page.revisions.exclude(id=new_revision.id)
        logger.info(
            f"DELETING OLD REVISIONS FOR PAGE {page.id}: {[x.id for x in old_revisions]}"
        )
        old_revisions.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0039_add_new_lessons_and_placeholders_field'),
    ]

    operations = [
        migrations.RunPython(
            forwards,
            migrations.RunPython.noop,
        )
    ]
