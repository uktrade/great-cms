# Generated by Django 4.2.14 on 2024-09-30 08:24

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0158_remove_curatedlistpage_country_tags_and_more'),
        ('export_academy', '0052_coursepage_region_tags'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='coursepage',
            name='type_of_export_tags',
        ),
        migrations.CreateModel(
            name='TradingBlocTaggedCoursePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='trading_bloc_tagged_items',
                        to='export_academy.coursepage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='trading_bloc_tagged_course_page',
                        to='core.personalisationtradingbloctag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectorTaggedCoursePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='sector_tagged_items',
                        to='export_academy.coursepage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='sector_tagged_course_page',
                        to='core.sectortag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegionTaggedCoursePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='region_tagged_items',
                        to='export_academy.coursepage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='region_tagged_course_page',
                        to='core.personalisationregiontag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryTaggedCoursePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='country_tagged_items',
                        to='export_academy.coursepage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='country_tagged_course_page',
                        to='core.countrytag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='coursepage',
            name='trading_bloc_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='export_academy.TradingBlocTaggedCoursePage',
                to='core.PersonalisationTradingBlocTag',
                verbose_name='Trading bloc tags',
            ),
        ),
        migrations.AlterField(
            model_name='coursepage',
            name='country_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='export_academy.CountryTaggedCoursePage',
                to='core.CountryTag',
                verbose_name='Country tags',
            ),
        ),
        migrations.AlterField(
            model_name='coursepage',
            name='region_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='export_academy.RegionTaggedCoursePage',
                to='core.PersonalisationRegionTag',
                verbose_name='Region tags',
            ),
        ),
        migrations.AlterField(
            model_name='coursepage',
            name='sector_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='export_academy.SectorTaggedCoursePage',
                to='core.SectorTag',
                verbose_name='Sector tags',
            ),
        ),
    ]
