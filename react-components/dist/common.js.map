{"version":3,"file":"common.js","mappings":"yMAmBA,IAEMA,EAAAA,WACJ,WAAYC,GACV,G,4FADyB,SACpBA,EAAL,CAMA,GAJAC,KAAKC,OAASF,EACdC,KAAKE,QAAUC,SAASC,cAAT,WAA2BL,EAAcM,aAAa,mBACrEL,KAAKM,QAA8D,OAApDP,EAAcM,aAAa,qBAEtCL,KAAKM,QAAS,CAChB,IAAMC,EAAkBC,MAAMC,KAAKT,KAAKE,QAAQQ,iBAXrC,8EAYXV,KAAKW,qBAAuBJ,EAAgB,GAC5CP,KAAKY,oBAAsBL,EAAgBA,EAAgBM,OAAS,GAGtEb,KAAKc,OAASd,KAAKc,OAAOC,KAAKf,MAC/BA,KAAKgB,cAAgBhB,KAAKgB,cAAcD,KAAKf,MAC7CA,KAAKiB,mBAAqBjB,KAAKiB,mBAAmBF,KAAKf,MAEvDA,KAAKkB,QAELnB,EAAcoB,iBAAiB,QAASnB,KAAKc,S,kDAG/C,SAAcM,GACRpB,KAAKqB,WACW,WAAdD,EAAME,KACRtB,KAAKkB,QAEW,QAAdE,EAAME,MACJF,EAAMG,SAAWvB,KAAKW,sBAAwBS,EAAMI,WACtDJ,EAAMK,iBACNzB,KAAKC,OAAOyB,SAEVN,EAAMG,SAAWvB,KAAKY,qBAAwBQ,EAAMI,WACtDJ,EAAMK,iBACNzB,KAAKC,OAAOyB,SAEVN,EAAMG,SAAWvB,KAAKC,QAAWmB,EAAMI,WACzCJ,EAAMK,iBACNzB,KAAKW,qBAAqBe,SAExBN,EAAMG,SAAWvB,KAAKC,QAAUmB,EAAMI,WACxCJ,EAAMK,iBACNzB,KAAKY,oBAAoBc,a,gCAMjC,SAAmBN,GACbpB,KAAKqB,WAAarB,KAAKE,QAAQyB,SAASP,EAAMG,SAAWH,EAAMG,SAAWvB,KAAKC,QACjFD,KAAKkB,U,oBAIT,WACE,MAAqD,SAA9ClB,KAAKC,OAAOI,aAAa,mB,oBAGlC,WACML,KAAKqB,SACPrB,KAAKkB,QAELlB,KAAK4B,S,kBAIT,WACE5B,KAAKC,OAAO4B,aAAa,gBAAiB,QAC1C7B,KAAKE,QAAQ2B,aAAa,cAAe,SAErC7B,KAAKM,UACPH,SAASgB,iBAAiB,UAAWnB,KAAKgB,eAC1Cb,SAASgB,iBAAiB,QAASnB,KAAKiB,uB,mBAI5C,WACEjB,KAAKC,OAAO4B,aAAa,gBAAiB,SAC1C7B,KAAKE,QAAQ2B,aAAa,cAAe,QAErC7B,KAAKM,UACPH,SAAS2B,oBAAoB,UAAW9B,KAAKgB,eAC7Cb,SAAS2B,oBAAoB,QAAS9B,KAAKiB,0B,mBAnF3CnB,GAyFJiC,OAAOZ,iBAAiB,oBAAoB,WAC1ChB,SAASO,iBAAiB,wBAAwBsB,SAAQ,SAACC,GAAD,OAAQ,IAAInC,EAAOmC,WC9G7EC,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,SCrBfG,CAAQ,O","sources":["webpack://[name]/../great-styles/src/js/Reveal.js","webpack://[name]/webpack/bootstrap","webpack://[name]/./core/js/common.js"],"sourcesContent":["/**\n * Reveal functionality\n *\n * Used to toggle the visibility of a given component using a given trigger.\n * Trigger and target component can be separate in the markup, and are linked\n * using their respective `aria-controls` and `id` attributes.\n *\n * Usage:\n *    <button aria-controls=\"target\" data-reveal-button [data-reveal-modal]>Toggle</button>\n *    <div id=\"target\">Content to reveal</div>\n *\n * CSS should be used to show/hide the content based on the `aria-expanded` and `aria-hidden` attributes.\n *\n * Optional: adding the `data-reveal-modal` attribute to the trigger will treat the content as a modal:\n * - Pressing 'Escape' will close\n * - Clicking anywhere outside the content will close (provide your own overlay with CSS)\n * - Focus will be trapped within content and trigger\n */\n\nconst tabbable = 'a[href], button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n\nclass Reveal {\n  constructor(buttonElement) {\n    if (!buttonElement) return\n\n    this.button = buttonElement\n    this.content = document.querySelector(`#${buttonElement.getAttribute('aria-controls')}`)\n    this.asModal = buttonElement.getAttribute('data-reveal-modal') !== null\n\n    if (this.asModal) {\n      const contentTabbable = Array.from(this.content.querySelectorAll(tabbable))\n      this.firstTabbableElement = contentTabbable[0]\n      this.lastTabbableElement = contentTabbable[contentTabbable.length - 1]\n    }\n\n    this.toggle = this.toggle.bind(this)\n    this.handleKeydown = this.handleKeydown.bind(this)\n    this.handleOutsideClick = this.handleOutsideClick.bind(this)\n\n    this.close()\n\n    buttonElement.addEventListener('click', this.toggle)\n  }\n\n  handleKeydown(event) {\n    if (this.isOpen()) {\n      if (event.key === 'Escape') {\n        this.close()\n      }\n      if (event.key === 'Tab') {\n        if (event.target === this.firstTabbableElement && event.shiftKey) {\n          event.preventDefault()\n          this.button.focus()\n        }\n        if (event.target === this.lastTabbableElement && !event.shiftKey) {\n          event.preventDefault()\n          this.button.focus()\n        }\n        if (event.target === this.button && !event.shiftKey) {\n          event.preventDefault()\n          this.firstTabbableElement.focus()\n        }\n        if (event.target === this.button && event.shiftKey) {\n          event.preventDefault()\n          this.lastTabbableElement.focus()\n        }\n      }\n    }\n  }\n\n  handleOutsideClick(event) {\n    if (this.isOpen() && !this.content.contains(event.target) && event.target !== this.button) {\n      this.close()\n    }\n  }\n\n  isOpen() {\n    return this.button.getAttribute('aria-expanded') === 'true'\n  }\n\n  toggle() {\n    if (this.isOpen()) {\n      this.close()\n    } else {\n      this.open()\n    }\n  }\n\n  open() {\n    this.button.setAttribute('aria-expanded', 'true')\n    this.content.setAttribute('aria-hidden', 'false')\n\n    if (this.asModal) {\n      document.addEventListener('keydown', this.handleKeydown)\n      document.addEventListener('click', this.handleOutsideClick)\n    }\n  }\n\n  close() {\n    this.button.setAttribute('aria-expanded', 'false')\n    this.content.setAttribute('aria-hidden', 'true')\n\n    if (this.asModal) {\n      document.removeEventListener('keydown', this.handleKeydown)\n      document.removeEventListener('click', this.handleOutsideClick)\n    }\n  }\n}\n\n(() => {\n  window.addEventListener('DOMContentLoaded', () => {\n    document.querySelectorAll('[data-reveal-button]').forEach((el) => new Reveal(el))\n  })\n})()\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('great-styles/src/js/Reveal')\n"],"names":["Reveal","buttonElement","this","button","content","document","querySelector","getAttribute","asModal","contentTabbable","Array","from","querySelectorAll","firstTabbableElement","lastTabbableElement","length","toggle","bind","handleKeydown","handleOutsideClick","close","addEventListener","event","isOpen","key","target","shiftKey","preventDefault","focus","contains","open","setAttribute","removeEventListener","window","forEach","el","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","require"],"sourceRoot":""}