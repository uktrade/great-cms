{"version":3,"file":"common.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,8CAA8C,4CAA4C;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sEAAsE,cAAc;AACpF;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sDAAsD,cAAc;AACpE;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;UCjJD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBAA,mBAAO,CAAC,gFAA4B,CAAC,C","sources":["webpack://great-cms/./node_modules/great-styles/src/js/Reveal.js","webpack://great-cms/webpack/bootstrap","webpack://great-cms/./core/js/common.js"],"sourcesContent":["/**\n * Reveal functionality\n *\n * Used to toggle the visibility of a given component using a given trigger.\n * Trigger and target component can be separate in the markup, and are linked\n * using their respective `aria-controls` and `id` attributes.\n *\n * Usage:\n *    <button\n *      aria-controls=\"target\"\n *      data-reveal-button\n *      [data-reveal-modal]\n *      [data-reveal-tabs=\"tab-group\"]\n *    >\n *      Toggle\n *    </button>\n *    <div id=\"target\">Content to reveal</div>\n *\n * CSS should be used to show/hide the content based on the `aria-expanded` and `aria-hidden` attributes.\n *\n * Optional attribute: `data-reveal-modal`\n * When added to the trigger, will treat the content as a modal:\n * - Pressing 'Escape' will close\n * - Clicking anywhere outside the content will close (provide your own overlay with CSS)\n * - Focus will be trapped within content and trigger\n *\n * Optional attribute: `data-reveal-tabs=\"tab-group-id\"\n * When added to the trigger, will handle all related reveals as linked and function like tabs, i.e. only\n * one of the linked reveals will be open at once, with the first one open by default at the start.\n */\n\nconst tabbable = 'a[href], button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n\nclass Reveal {\n  constructor(buttonElement) {\n    if (!buttonElement) return\n\n    this.button = buttonElement\n    this.content = document.querySelector(`#${buttonElement.getAttribute('aria-controls')}`)\n    this.asModal = buttonElement.getAttribute('data-reveal-modal') !== null\n    this.tabGroup = buttonElement.getAttribute('data-reveal-tabs')\n\n    if (this.asModal) {\n      const contentTabbable = Array.from(this.content.querySelectorAll(tabbable))\n      this.firstTabbableElement = contentTabbable[0]\n      this.lastTabbableElement = contentTabbable[contentTabbable.length - 1]\n    }\n\n    this.toggle = this.toggle.bind(this)\n    this.close = this.close.bind(this)\n    this.handleKeydown = this.handleKeydown.bind(this)\n    this.handleOutsideClick = this.handleOutsideClick.bind(this)\n\n    if (this.tabGroup && document.querySelector(`[data-reveal-tabs=\"${this.tabGroup}\"]`) === this.button) {\n      this.open()\n    } else {\n      this.close()\n    }\n\n    buttonElement.addEventListener('click', this.toggle)\n  }\n\n  handleKeydown(event) {\n    if (this.isOpen()) {\n      if (event.key === 'Escape') {\n        this.close()\n      }\n      if (event.key === 'Tab') {\n        if (event.target === this.firstTabbableElement && event.shiftKey) {\n          event.preventDefault()\n          this.button.focus()\n        }\n        if (event.target === this.lastTabbableElement && !event.shiftKey) {\n          event.preventDefault()\n          this.button.focus()\n        }\n        if (event.target === this.button && !event.shiftKey) {\n          event.preventDefault()\n          this.firstTabbableElement.focus()\n        }\n        if (event.target === this.button && event.shiftKey) {\n          event.preventDefault()\n          this.lastTabbableElement.focus()\n        }\n      }\n    }\n  }\n\n  handleOutsideClick(event) {\n    if (this.isOpen() && !this.content.contains(event.target) && event.target !== this.button) {\n      this.close()\n    }\n  }\n\n  isOpen() {\n    return this.button.getAttribute('aria-expanded') === 'true'\n  }\n\n  toggle() {\n    if (this.isOpen() && !this.tabGroup) {\n      this.close()\n    } else {\n      this.open()\n    }\n  }\n\n  open() {\n    this.button.setAttribute('aria-expanded', 'true')\n    this.content.setAttribute('aria-hidden', 'false')\n\n    if (this.tabGroup) {\n      this.button.addEventListener('reveal:close', this.close)\n\n      document.querySelectorAll(`[data-reveal-tabs=\"${this.tabGroup}\"]`).forEach(el => {\n        if (el !== this.button) {\n          el.dispatchEvent(new Event('reveal:close'))\n        }\n      })\n    }\n\n    if (this.asModal) {\n      document.addEventListener('keydown', this.handleKeydown)\n      document.addEventListener('click', this.handleOutsideClick)\n    }\n  }\n\n  close() {\n    this.button.setAttribute('aria-expanded', 'false')\n    this.content.setAttribute('aria-hidden', 'true')\n\n    if (this.tabGroup) {\n      this.button.removeEventListener('reveal:close', this.close)\n    }\n\n    if (this.asModal) {\n      document.removeEventListener('keydown', this.handleKeydown)\n      document.removeEventListener('click', this.handleOutsideClick)\n    }\n  }\n}\n\n(() => {\n  window.addEventListener('DOMContentLoaded', () => {\n    document.querySelectorAll('[data-reveal-button]').forEach((el) => new Reveal(el))\n  })\n})()\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('great-styles/src/js/Reveal')\n"],"names":["require"],"sourceRoot":""}