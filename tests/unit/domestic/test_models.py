from unittest import mock

import pytest
from wagtail.core.blocks.stream_block import StreamBlockValidationError
from wagtail.tests.utils import WagtailPageTests

from core import mixins
from directory_api_client import api_client
from directory_sso_api_client import sso_api_client
from domestic.models import (
    AdviceTopicLandingPage,
    ArticleListingPage,
    ArticlePage,
    CountryGuidePage,
    DomesticDashboard,
    DomesticHomePage,
    MarketsTopicLandingPage,
    industry_accordions_validation,
    main_statistics_validation,
)
from tests.helpers import create_response
from tests.unit.core.factories import (
    CuratedListPageFactory,
    DetailPageFactory,
    LessonPlaceholderPageFactory,
    ListPageFactory,
    TopicPageFactory,
)
from .factories import (
    AdviceTopicLandingPageFactory,
    ArticlePageFactory,
    CountryGuidePageFactory,
    DomesticDashboardFactory,
    DomesticHomePageFactory,
)


class DomesticHomePageTests(WagtailPageTests):
    def test_page_is_exclusive(self):
        assert issubclass(DomesticHomePage, mixins.WagtailAdminExclusivePageMixin)

    def test_can_create_homepage(self):
        homepage = DomesticHomePageFactory()
        self.assertEqual(homepage.title, 'homepage')

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='home')
        homepage = DomesticHomePage.objects.get(url_path='/')

        # slug should be auto-assigned to a slugified version of the title
        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)

        retrieved_page = DomesticHomePage.objects.get(id=hello_page.id)
        self.assertEqual(retrieved_page.slug, 'hello-world')

        # auto-generated slug should receive a suffix to make it unique
        events_page = DomesticHomePage(title='Events')
        homepage.add_child(instance=events_page)
        retrieved_page = DomesticHomePage.objects.get(id=events_page.id)
        self.assertEqual(retrieved_page.slug, 'events')


class DomesticDashboardTests(WagtailPageTests):
    def test_page_is_exclusive(self):
        assert issubclass(DomesticDashboard, mixins.WagtailAdminExclusivePageMixin)

    def test_can_create_dashboard(self):
        dashboard = DomesticDashboardFactory()
        self.assertEqual(dashboard.title, 'Title of Dashboard')


@pytest.mark.django_db
@mock.patch.object(sso_api_client.user, 'get_user_page_views')
@mock.patch.object(api_client.exportplan, 'exportplan_list')
@mock.patch.object(api_client.personalisation, 'events_by_location_list')
@mock.patch.object(api_client.personalisation, 'export_opportunities_by_relevance_list')
@mock.patch.object(sso_api_client.user, 'get_user_lesson_completed')
def test_dashboard_page_routing(
    mock_get_user_lesson_completed,
    mock_events_by_location_list,
    mock_export_opportunities_by_relevance_list,
    mock_exportplan_list,
    mock_get_user_page_views,
    patch_set_user_page_view,
    mock_get_company_profile,
    client,
    user,
    get_request,
    domestic_homepage,
    domestic_site,
):
    mock_exportplan_list.return_value = [{}]
    mock_events_by_location_list.return_value = create_response(json_body={'results': []})
    mock_export_opportunities_by_relevance_list.return_value = create_response(json_body={'results': []})
    mock_get_user_page_views.return_value = create_response(json_body={'result': 'ok', 'page_views': {}})
    list_one = ListPageFactory(parent=domestic_homepage, slug='topic-one', record_read_progress=True)
    lesson_one = DetailPageFactory(parent=list_one, slug='lesson-one')
    dashboard = DomesticDashboardFactory(
        parent=domestic_homepage,
        slug='dashboard',
        components__0__route__route_type='learn',
        components__0__route__title='Learning title',
        components__0__route__body='Learning Body Text',
        components__0__route__button={'label': 'Start learning'},
        components__1__route__route_type='target',
        components__1__route__title='Target title',
        components__1__route__body='Target Body Text',
        components__1__route__button={'label': 'Start targetting'},
        components__2__route__route_type='plan',
        components__2__route__title='Planning title',
        components__2__route__body='Planning Body Text',
        components__2__route__button={'label': 'Start planning'},
    )
    # All three routes should be visible
    mock_get_user_lesson_completed.return_value = create_response(json_body={'result': 'ok'})
    context_data = dashboard.get_context(get_request)
    assert len(context_data['routes']) == 3
    assert context_data['routes']['learn'].value.get('route_type') == 'learn'
    assert context_data['routes']['plan'].value.get('route_type') == 'plan'
    assert context_data['routes']['plan'].value.get('body') == 'Planning Body Text'
    assert context_data['lessons_in_progress'] is False
    # Check that the lesson route block is enabled
    assert context_data['routes']['learn'].value.get('enabled') is True

    # Build learning pages and mock one as 'read'
    list_page_one = ListPageFactory(parent=domestic_homepage, slug='list-page-one', record_read_progress=True)
    section_one = CuratedListPageFactory(parent=list_page_one, slug='list-page-one-module-one')
    topic_one = TopicPageFactory(parent=section_one, title='Module one, first topic block')

    lesson_one = DetailPageFactory(
        parent=topic_one,
        slug='lesson-one',
    )
    LessonPlaceholderPageFactory(parent=topic_one, title='Placeholder To Show They Do Not Interfere With Counts')

    mock_get_user_lesson_completed.return_value = create_response(
        json_body={
            'result': 'ok',
            'lesson_completed': [
                {'lesson': lesson_one.id},
            ],
        }
    )

    # the learning route should be disabled
    context_data = dashboard.get_context(get_request)
    assert context_data['lessons_in_progress'] is True
    assert context_data['routes']['learn'].value.get('enabled') is False

    # set a country in exportplan and watch plan section disappear
    assert context_data['routes']['target'].value.get('enabled') is True
    mock_exportplan_list.return_value = create_response(json_body=[{'export_countries': ['France']}])
    context_data = dashboard.get_context(get_request)
    assert context_data['routes']['target'].value.get('enabled') is False

    # page visit on exportplan dashboard should make plan section disappear
    assert context_data['routes']['plan'].value.get('enabled') is True
    mock_get_user_page_views.return_value = create_response(
        json_body={'result': 'ok', 'page_views': {'/export-plan/dashboard/': {'service': 'great-cms'}}}
    )
    context_data = dashboard.get_context(get_request)
    assert context_data['routes']['plan'].value.get('enabled') is False


@pytest.mark.django_db
def test_can_create_country_guide_page(
    domestic_homepage,
    domestic_site,
):
    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test country',
    )
    assert page.title == 'Test country'
    assert page.slug == 'test-country'


@pytest.mark.django_db
@pytest.mark.parametrize(
    'data,expected',
    (
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': 'Col 1 teaser',
                    'body': 'Col 1 body',
                },
                {
                    'title': 'Col 2 title',
                    'teaser': 'Col 2 teaser',
                    'body': 'Col 2 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': 'Col 1 teaser',
                    'body': 'Col 1 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 2 title',
                    'teaser': 'Col 2 teaser',
                    'body': 'Col 2 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
            },
            [],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                # 'fact_sheet_column_1_title': 'Col 1 title',  # Not OK to be missing
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                # 'fact_sheet_column_2_body': 'Col 2 body',  # Not OK to be missing
            },
            [],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                # 'fact_sheet_column_1_teaser': 'Col 1 teaser',  # OK to be missing
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                # 'fact_sheet_column_2_teaser': 'Col 2 teaser',  # OK to be missing
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': '',
                    'body': 'Col 1 body',
                },
                {
                    'title': 'Col 2 title',
                    'teaser': '',
                    'body': 'Col 2 body',
                },
            ],
        ),
    ),
    ids=[
        'both cols',
        'only first',
        'only second',
        'no cols',
        'missing key data',
        'missing optional data',
    ],
)
def test_fact_sheet_columns(
    data,
    expected,
    domestic_homepage,
    domestic_site,
):

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        **data,
    )
    assert page.fact_sheet_columns == expected


@pytest.mark.parametrize(
    'data,expected',
    (
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_two_title': 'CTA 2 title',
                'intro_cta_two_link': 'https://example.com/2/',
                'intro_cta_three_title': 'CTA 3 title',
                'intro_cta_three_link': 'https://example.com/3/',
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
                {
                    'title': 'CTA 2 title',
                    'link': 'https://example.com/2/',
                },
                {
                    'title': 'CTA 3 title',
                    'link': 'https://example.com/3/',
                },
            ],
        ),
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_three_title': 'CTA 3 title',
                'intro_cta_three_link': 'https://example.com/3/',
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
                {
                    'title': 'CTA 3 title',
                    'link': 'https://example.com/3/',
                },
            ],
        ),
        (
            {
                'intro_cta_two_title': 'CTA 2 title',
                'intro_cta_two_link': 'https://example.com/2/',
            },
            [
                {
                    'title': 'CTA 2 title',
                    'link': 'https://example.com/2/',
                },
            ],
        ),
        (
            {},
            [],
        ),
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_two_title': 'CTA 2 title',  #  missing link
                'intro_cta_three_link': 'https://example.com/3/',  # missing title
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
            ],
        ),
    ),
    ids=[
        'all CTAs',
        'two CTAs',
        'One CTA',
        'No CTAs',
        'missing key fields',
    ],
)
@pytest.mark.django_db
def test_intro_ctas(
    data,
    expected,
    domestic_homepage,
    domestic_site,
):
    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        **data,
    )
    assert page.intro_ctas == expected


@pytest.mark.parametrize(
    'related_page_data',
    (
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        ({'title': 'Article THREE', 'rel_name': 'related_page_three'},),
        (),
    ),
    ids=['three related', 'two related v1', 'two related v2', 'one related', 'no related'],
)
@pytest.mark.django_db
def test_related_pages(
    related_page_data,
    domestic_homepage,
    domestic_site,
):

    kwargs = {}

    for data in related_page_data:
        kwargs[data['rel_name']] = ArticlePageFactory(article_title=data['title'])

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        **kwargs,
    )
    assert [x for x in page.related_pages] == [x for x in kwargs.values()]


@pytest.mark.parametrize(
    'blocks_to_create,expected_exception_message',
    (
        (1, 'There must be between two and six statistics in this panel'),
        (2, None),
        (3, None),
        (4, None),
        (5, None),
        (6, None),
        (7, 'There must be between two and six statistics in this panel'),
    ),
)
def test_main_statistics_validation(blocks_to_create, expected_exception_message):
    value = [mock.Mock() for x in range(blocks_to_create)]

    if expected_exception_message:
        with pytest.raises(StreamBlockValidationError) as ctx:
            main_statistics_validation(value)
            assert ctx.message == expected_exception_message
    else:
        try:
            main_statistics_validation(value)  #
        except Exception as e:
            assert False, f'Should not have got a {e}'


@pytest.mark.parametrize(
    'blocks_to_create,expected_exception_message',
    (
        (1, None),
        (2, None),
        (3, None),
        (4, None),
        (5, None),
        (6, None),
        (7, 'There must be no more than six industry blocks in this panel'),
    ),
)
def test_industry_accordions_validation(blocks_to_create, expected_exception_message):

    value = [mock.Mock() for x in range(blocks_to_create)]

    if expected_exception_message:
        with pytest.raises(StreamBlockValidationError) as ctx:
            industry_accordions_validation(value)
            assert ctx.message == expected_exception_message
    else:
        try:
            industry_accordions_validation(value)  #
        except Exception as e:
            assert False, f'Should not have got a {e}'


# BaseContentPage is abstract but had some methods on it


@pytest.mark.django_db
def test_base_content_page__ancestors_in_app(
    domestic_homepage,
    domestic_site,
):

    advice_topic_page = AdviceTopicLandingPageFactory(
        title='Advice',
        parent=domestic_homepage,
    )

    article_page = ArticlePageFactory(
        article_title='test article',
        parent=advice_topic_page,
    )

    assert article_page.get_ancestors_in_app() == [
        # NB: domestic homepage is deliberately NOT in this list
        advice_topic_page.page_ptr,
        # NB: article_page is deliberately NOT in this list
    ]


@pytest.mark.skip(reason='We need more of the page tree ported before we can test this.')
def test_base_content_page__ancestors_in_app__involving_folder_pages():
    pass


@pytest.mark.django_db
def test_base_content_page__get_breadcrumbs(
    domestic_homepage,
    domestic_site,
):
    advice_topic_page = AdviceTopicLandingPageFactory(
        title='Advice',
        parent=domestic_homepage,
    )

    article_page = ArticlePageFactory(
        article_title='test article',
        parent=advice_topic_page,
    )
    assert article_page.get_breadcrumbs() == [
        # NB: domestic homepage is deliberately NOT in this list
        {
            'title': advice_topic_page.title,
            'url': advice_topic_page.url,
        },
        {
            'title': article_page.title,
            'url': article_page.url,
        }
        # NB: article_page IS in this list
    ]


@pytest.mark.skip(reason='We need more of the page tree ported before we can test this.')
def test_base_content_page__get_breadcrumbs__using_breadcrumbs_label_field():
    pass


class AdviceTopicLandingPageTests(WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            AdviceTopicLandingPage,
            {DomesticHomePage},
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            AdviceTopicLandingPage,
            {
                ArticlePage,
                ArticleListingPage,
            },
        )

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')

        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)

        advice_topic_page = AdviceTopicLandingPage(
            title='Advice',
        )
        homepage.add_child(instance=advice_topic_page)
        retrieved_page_1 = AdviceTopicLandingPage.objects.get(id=advice_topic_page.id)
        self.assertEqual(retrieved_page_1.slug, 'advice')


class MarketsTopicLandingPageTests(WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            MarketsTopicLandingPage,
            {DomesticHomePage},
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            MarketsTopicLandingPage,
            {CountryGuidePage},
        )

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')

        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)
        markets_topic_page = MarketsTopicLandingPage(
            title='Markets',
        )
        homepage.add_child(instance=markets_topic_page)
        retrieved_page_2 = MarketsTopicLandingPage.objects.get(id=markets_topic_page.id)
        self.assertEqual(retrieved_page_2.slug, 'markets')


class ArticleListingPageTests(WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            ArticleListingPage,
            {
                CountryGuidePage,
                AdviceTopicLandingPage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            ArticleListingPage,
            {
                ArticlePage,
            },
        )


class ArticlePageTests(WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            ArticlePage,
            {
                CountryGuidePage,
                ArticleListingPage,
                AdviceTopicLandingPage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            ArticlePage,
            {},
        )
