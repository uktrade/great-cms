import json
from datetime import timedelta
from unittest import mock

import pytest
from bs4 import BeautifulSoup
from django.core.cache import cache
from django.test import RequestFactory, override_settings
from django.utils.timezone import now as tz_now
from wagtail.core.blocks.stream_block import StreamBlockValidationError
from wagtail.core.models import Page
from wagtail.core.rich_text import RichText
from wagtail.tests.utils import WagtailPageTests
from wagtail_factories import SiteFactory

from core import cache_keys, mixins, models as core_models, service_urls
from directory_api_client import api_client
from directory_sso_api_client import sso_api_client
from domestic.forms import SectorPotentialForm
from domestic.models import (
    ArticleListingPage,
    ArticlePage,
    CountryGuidePage,
    DataLayerMixin,
    DomesticDashboard,
    DomesticHomePage,
    GreatDomesticHomePage,
    GuidancePage,
    MarketsTopicLandingPage,
    PerformanceDashboardPage,
    StructuralPage,
    TopicLandingPage,
    TradeFinancePage,
    industry_accordions_validation,
    main_statistics_validation,
)
from tests.helpers import SetUpLocaleMixin, create_response
from tests.unit.core.factories import (
    CountryFactory,
    CuratedListPageFactory,
    DetailPageFactory,
    LessonPlaceholderPageFactory,
    ListPageFactory,
    TopicPageFactory,
)
from .factories import (
    ArticleListingPageFactory,
    ArticlePageFactory,
    CountryGuidePageFactory,
    DomesticDashboardFactory,
    DomesticHomePageFactory,
    GreatDomesticHomePageFactory,
    MarketsTopicLandingPageFactory,
    PerformanceDashboardPageFactory,
    TopicLandingPageFactory,
)


class DomesticHomePageTests(SetUpLocaleMixin, WagtailPageTests):
    # NB: These are DEPRECATED tests for the MVP homepage, not the one ported from V1
    def test_page_is_exclusive(self):
        assert issubclass(DomesticHomePage, mixins.WagtailAdminExclusivePageMixin)

    def test_can_create_homepage(self):
        homepage = DomesticHomePageFactory()
        self.assertEqual(homepage.title, 'homepage')

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='home')
        homepage = DomesticHomePage.objects.get(url_path='/')

        # slug should be auto-assigned to a slugified version of the title
        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)

        retrieved_page = DomesticHomePage.objects.get(id=hello_page.id)
        self.assertEqual(retrieved_page.slug, 'hello-world')

        # auto-generated slug should receive a suffix to make it unique
        events_page = DomesticHomePage(title='Events')
        homepage.add_child(instance=events_page)
        retrieved_page = DomesticHomePage.objects.get(id=events_page.id)
        self.assertEqual(retrieved_page.slug, 'events')


class DomesticDashboardTests(SetUpLocaleMixin, WagtailPageTests):
    # NB: These are tests for the MVP homepage, not the richer one ported from V1
    # see GreatDomesticHomePageTests for the richer-homepage tests
    def test_page_is_exclusive(self):
        assert issubclass(DomesticDashboard, mixins.WagtailAdminExclusivePageMixin)

    def test_can_create_dashboard(self):
        dashboard = DomesticDashboardFactory()
        self.assertEqual(dashboard.title, 'Title of Dashboard')


@pytest.mark.django_db
@mock.patch.object(sso_api_client.user, 'get_user_page_views')
# @mock.patch.object(api_client.exportplan, 'exportplan_list')
@mock.patch.object(api_client.personalisation, 'events_by_location_list')
@mock.patch.object(api_client.personalisation, 'export_opportunities_by_relevance_list')
@mock.patch.object(sso_api_client.user, 'get_user_lesson_completed')
def test_dashboard_page_routing(
    # NB: These are tests for the MVP homepage, not the one ported from V1
    mock_get_user_lesson_completed,
    mock_events_by_location_list,
    mock_export_opportunities_by_relevance_list,
    mock_get_user_page_views,
    patch_set_user_page_view,
    mock_get_company_profile,
    mock_detail_export_plan_client,
    patch_export_plan_detail_list,
    client,
    user,
    get_request,
    domestic_homepage,
    domestic_site,
    mock_get_user_profile,
):
    patch_export_plan_detail_list.stop()
    mock_detail_export_plan_client.return_value = [{}]
    mock_events_by_location_list.return_value = create_response(json_body={'results': []})
    mock_export_opportunities_by_relevance_list.return_value = create_response(json_body={'results': []})
    mock_get_user_page_views.return_value = create_response(json_body={'result': 'ok', 'page_views': {}})
    list_one = ListPageFactory(parent=domestic_homepage, slug='topic-one', record_read_progress=True)
    lesson_one = DetailPageFactory(parent=list_one, slug='lesson-one')
    dashboard = DomesticDashboardFactory(
        parent=domestic_homepage,
        slug='dashboard',
        components__0__route__route_type='learn',
        components__0__route__title='Learning title',
        components__0__route__body='Learning Body Text',
        components__0__route__button={'label': 'Start learning'},
        components__1__route__route_type='target',
        components__1__route__title='Target title',
        components__1__route__body='Target Body Text',
        components__1__route__button={'label': 'Start targetting'},
        components__2__route__route_type='plan',
        components__2__route__title='Planning title',
        components__2__route__body='Planning Body Text',
        components__2__route__button={'label': 'Start planning'},
    )
    # All three routes should be visible
    mock_get_user_lesson_completed.return_value = create_response(json_body={'result': 'ok'})
    context_data = dashboard.get_context(get_request)
    assert len(context_data['routes']) == 3
    assert context_data['routes']['learn'].value.get('route_type') == 'learn'
    assert context_data['routes']['plan'].value.get('route_type') == 'plan'
    assert context_data['routes']['plan'].value.get('body') == 'Planning Body Text'
    assert context_data['lessons_in_progress'] is False
    # Check that the lesson route block is enabled
    assert context_data['routes']['learn'].value.get('enabled') is True

    # Build learning pages and mock one as 'read'
    list_page_one = ListPageFactory(parent=domestic_homepage, slug='list-page-one', record_read_progress=True)
    section_one = CuratedListPageFactory(parent=list_page_one, slug='list-page-one-module-one')
    topic_one = TopicPageFactory(parent=section_one, title='Module one, first topic block')

    lesson_one = DetailPageFactory(
        parent=topic_one,
        slug='lesson-one',
    )
    LessonPlaceholderPageFactory(parent=topic_one, title='Placeholder To Show They Do Not Interfere With Counts')

    mock_get_user_lesson_completed.return_value = create_response(
        json_body={
            'result': 'ok',
            'lesson_completed': [
                {'lesson': lesson_one.id},
            ],
        }
    )

    # the learning route should be disabled
    context_data = dashboard.get_context(get_request)
    assert context_data['lessons_in_progress'] is True
    assert context_data['routes']['learn'].value.get('enabled') is False

    # set a country in exportplan and watch plan section disappear
    mock_detail_export_plan_client.return_value = create_response(json_body=[{'export_countries': ['France']}])
    context_data = dashboard.get_context(get_request)
    assert context_data['routes']['target'].value.get('enabled') is True

    # page visit on exportplan dashboard should make plan section disappear
    assert context_data['routes']['plan'].value.get('enabled') is True
    mock_get_user_page_views.return_value = create_response(
        json_body={'result': 'ok', 'page_views': {'/export-plan/dashboard/': {'service': 'great-cms'}}}
    )
    context_data = dashboard.get_context(get_request)
    # Check exportplan list exists
    assert len(context_data.get('exportplan_list')) == 1


@pytest.mark.django_db
def test_can_create_country_guide_page(
    domestic_homepage,
    domestic_site,
):
    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test country',
    )
    assert page.title == 'Test country'
    assert page.slug == 'test-country'


@pytest.mark.django_db
@pytest.mark.parametrize(
    'data,expected',
    (
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': 'Col 1 teaser',
                    'body': 'Col 1 body',
                },
                {
                    'title': 'Col 2 title',
                    'teaser': 'Col 2 teaser',
                    'body': 'Col 2 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': 'Col 1 teaser',
                    'body': 'Col 1 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 2 title',
                    'teaser': 'Col 2 teaser',
                    'body': 'Col 2 body',
                },
            ],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
            },
            [],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                # 'fact_sheet_column_1_title': 'Col 1 title',  # Not OK to be missing
                'fact_sheet_column_1_teaser': 'Col 1 teaser',
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                'fact_sheet_column_2_teaser': 'Col 2 teaser',
                # 'fact_sheet_column_2_body': 'Col 2 body',  # Not OK to be missing
            },
            [],
        ),
        (
            {
                'fact_sheet_title': 'test fact sheet',
                'fact_sheet_teaser': 'test fact sheet teaser',
                'fact_sheet_column_1_title': 'Col 1 title',
                # 'fact_sheet_column_1_teaser': 'Col 1 teaser',  # OK to be missing
                'fact_sheet_column_1_body': 'Col 1 body',
                'fact_sheet_column_2_title': 'Col 2 title',
                # 'fact_sheet_column_2_teaser': 'Col 2 teaser',  # OK to be missing
                'fact_sheet_column_2_body': 'Col 2 body',
            },
            [
                {
                    'title': 'Col 1 title',
                    'teaser': '',
                    'body': 'Col 1 body',
                },
                {
                    'title': 'Col 2 title',
                    'teaser': '',
                    'body': 'Col 2 body',
                },
            ],
        ),
    ),
    ids=[
        'both cols',
        'only first',
        'only second',
        'no cols',
        'missing key data',
        'missing optional data',
    ],
)
def test_fact_sheet_columns(
    data,
    expected,
    domestic_homepage,
    domestic_site,
):
    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        **data,
    )
    assert page.fact_sheet_columns == expected


@pytest.mark.parametrize(
    'data,expected',
    (
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_two_title': 'CTA 2 title',
                'intro_cta_two_link': 'https://example.com/2/',
                'intro_cta_three_title': 'CTA 3 title',
                'intro_cta_three_link': 'https://example.com/3/',
                'intro_cta_four_title': 'CTA 4 title',
                'intro_cta_four_link': 'https://example.com/4/',
                'iso2': 'FR',
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
                {
                    'title': 'CTA 2 title',
                    'link': 'https://example.com/2/',
                },
                {
                    'title': 'CTA 3 title',
                    'link': 'https://example.com/3/',
                },
                {
                    'title': 'CTA 4 title',
                    'link': 'https://example.com/4/',
                },
                {
                    'title': 'Check duties and customs',
                    'link': 'https://www.check-duties-customs-exporting-goods.service.gov.uk/searchproduct?d=FR',
                },
                {
                    'title': 'Check for trade barriers',
                    'link': 'https://www.check-international-trade-barriers.service.gov.uk/barriers/'
                    '?resolved=0&location=fr',
                },
            ],
        ),
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_three_title': 'CTA 3 title',
                'intro_cta_three_link': 'https://example.com/3/',
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
                {
                    'title': 'CTA 3 title',
                    'link': 'https://example.com/3/',
                },
                {
                    'title': 'Check duties and customs',
                    'link': 'https://www.check-duties-customs-exporting-goods.service.gov.uk',
                },
                {
                    'title': 'Check for trade barriers',
                    'link': 'https://www.check-international-trade-barriers.service.gov.uk/barriers/',
                },
            ],
        ),
        (
            {
                'intro_cta_two_title': 'CTA 2 title',
                'intro_cta_two_link': 'https://example.com/2/',
            },
            [
                {
                    'title': 'CTA 2 title',
                    'link': 'https://example.com/2/',
                },
                {
                    'title': 'Check duties and customs',
                    'link': 'https://www.check-duties-customs-exporting-goods.service.gov.uk',
                },
                {
                    'title': 'Check for trade barriers',
                    'link': 'https://www.check-international-trade-barriers.service.gov.uk/barriers/',
                },
            ],
        ),
        (
            {},
            [
                {
                    'title': 'Check duties and customs',
                    'link': 'https://www.check-duties-customs-exporting-goods.service.gov.uk',
                },
                {
                    'title': 'Check for trade barriers',
                    'link': 'https://www.check-international-trade-barriers.service.gov.uk/barriers/',
                },
            ],
        ),
        (
            {
                'intro_cta_one_title': 'CTA 1 title',
                'intro_cta_one_link': 'https://example.com/1/',
                'intro_cta_two_title': 'CTA 2 title',  # missing link
                'intro_cta_three_link': 'https://example.com/3/',  # missing title
            },
            [
                {
                    'title': 'CTA 1 title',
                    'link': 'https://example.com/1/',
                },
                {
                    'title': 'Check duties and customs',
                    'link': 'https://www.check-duties-customs-exporting-goods.service.gov.uk',
                },
                {
                    'title': 'Check for trade barriers',
                    'link': 'https://www.check-international-trade-barriers.service.gov.uk/barriers/',
                },
            ],
        ),
    ),
    ids=[
        'all CTAs',
        'two CTAs',
        'One CTA',
        'No CTAs',
        'missing key fields',
    ],
)
@pytest.mark.django_db
def test_intro_ctas(
    data,
    expected,
    domestic_homepage,
    domestic_site,
):
    country = CountryFactory(name='France', slug='france')

    iso2 = data.pop('iso2', None)
    if iso2:
        country.iso2 = iso2

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
        **data,
    )

    assert page.intro_ctas == expected


@pytest.mark.django_db
def test_trade_and_duties_links(domestic_homepage):
    country = CountryFactory(name='France', slug='france', iso2='FR')

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert (
        page.duties_and_customs_link == 'https://www.check-duties-customs-exporting-goods.service.gov.uk'
        '/searchproduct?d=FR'
    )
    assert (
        page.trade_barriers_link == 'https://www.check-international-trade-barriers.service.gov.uk'
        '/barriers/?resolved=0&location=fr'
    )
    assert (
        page.trade_barriers_resolved_link == 'https://www.check-international-trade-barriers.service.gov.uk'
        '/barriers/?resolved=1&location=fr'
    )


@pytest.mark.django_db
def test_trade_and_duties_links_no_iso(domestic_homepage):
    country = CountryFactory(name='France', slug='france')

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert page.duties_and_customs_link == 'https://www.check-duties-customs-exporting-goods.service.gov.uk'
    assert page.trade_barriers_link == 'https://www.check-international-trade-barriers.service.gov.uk/barriers/'
    assert page.trade_barriers_resolved_link is None


@pytest.mark.django_db
def test_trade_and_duties_links_no_country(domestic_homepage):
    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
    )

    assert page.duties_and_customs_link == 'https://www.check-duties-customs-exporting-goods.service.gov.uk'
    assert page.trade_barriers_link == 'https://www.check-international-trade-barriers.service.gov.uk/barriers/'
    assert page.trade_barriers_resolved_link is None


@pytest.mark.parametrize(
    'iso2',
    ('CN', 'US', 'AU', 'DE', 'IN', 'PT', 'LI'),
)
@pytest.mark.django_db
def test_stats_most_visited_guide(
    iso2,
    mock_trade_highlights,
    mock_market_trends,
    mock_top_goods_exports,
    mock_top_services_exports,
    domestic_homepage,
    settings,
):
    settings.FEATURE_SHOW_MARKET_GUIDE_VISUALISATIONS = True

    country = CountryFactory(name='Country name', slug='country-slug', iso2=iso2)

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert len(page.stats) == 4


@pytest.mark.parametrize(
    'iso2',
    ('FR', 'IT', 'ES'),
)
@pytest.mark.django_db
def test_stats_not_most_visited_guide(iso2, domestic_homepage, settings):
    settings.FEATURE_SHOW_MARKET_GUIDE_VISUALISATIONS = True

    country = CountryFactory(name='Country name', slug='country-slug', iso2=iso2)

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert page.stats is None


@pytest.mark.django_db
def test_stats_feature_off(domestic_homepage, settings):
    settings.FEATURE_SHOW_MARKET_GUIDE_VISUALISATIONS = False

    country = CountryFactory(name='China', slug='china', iso2='CN')

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert page.stats is None


@pytest.mark.django_db
def test_stats_no_iso(domestic_homepage, settings):
    settings.FEATURE_SHOW_MARKET_GUIDE_VISUALISATIONS = True

    country = CountryFactory(name='France', slug='france')

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        country=country,
    )

    assert page.stats is None


@pytest.mark.django_db
def test_stats_no_country(domestic_homepage, settings):
    settings.FEATURE_SHOW_MARKET_GUIDE_VISUALISATIONS = True

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
    )

    assert page.stats is None


@pytest.mark.parametrize(
    'related_page_data',
    (
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        ({'title': 'Article THREE', 'rel_name': 'related_page_three'},),
        (),
    ),
    ids=['three related', 'two related v1', 'two related v2', 'one related', 'no related'],
)
@pytest.mark.django_db
def test_country_guide_page__related_pages(
    related_page_data,
    domestic_homepage,
    domestic_site,
):
    kwargs = {}

    for data in related_page_data:
        kwargs[data['rel_name']] = ArticlePageFactory(article_title=data['title'])

    page = CountryGuidePageFactory(
        parent=domestic_homepage,
        title='Test GCP',
        **kwargs,
    )
    assert [x for x in page.related_pages] == [x for x in kwargs.values()]


@pytest.mark.parametrize(
    'blocks_to_create,expected_exception_message',
    (
        (1, 'There must be between two and six statistics in this panel'),
        (2, None),
        (3, None),
        (4, None),
        (5, None),
        (6, None),
        (7, 'There must be between two and six statistics in this panel'),
    ),
)
def test_main_statistics_validation(blocks_to_create, expected_exception_message):
    value = [mock.Mock() for x in range(blocks_to_create)]

    if expected_exception_message:
        with pytest.raises(StreamBlockValidationError) as ctx:
            main_statistics_validation(value)
            assert ctx.message == expected_exception_message
    else:
        try:
            main_statistics_validation(value)  #
        except Exception as e:
            assert False, f'Should not have got a {e}'


@pytest.mark.parametrize(
    'blocks_to_create,expected_exception_message',
    (
        (1, None),
        (2, None),
        (3, None),
        (4, None),
        (5, None),
        (6, None),
        (7, 'There must be no more than six industry blocks in this panel'),
    ),
)
def test_industry_accordions_validation(blocks_to_create, expected_exception_message):
    value = [mock.Mock() for x in range(blocks_to_create)]

    if expected_exception_message:
        with pytest.raises(StreamBlockValidationError) as ctx:
            industry_accordions_validation(value)
            assert ctx.message == expected_exception_message
    else:
        try:
            industry_accordions_validation(value)  #
        except Exception as e:
            assert False, f'Should not have got a {e}'


# BaseContentPage is abstract but had some methods on it


@pytest.mark.django_db
def test_base_content_page__ancestors_in_app(
    domestic_homepage,
    domestic_site,
):
    advice_topic_page = TopicLandingPageFactory(
        title='Advice',
        parent=domestic_homepage,
    )

    article_page = ArticlePageFactory(
        article_title='test article',
        parent=advice_topic_page,
    )

    assert article_page.get_ancestors_in_app() == [
        # NB: domestic homepage is deliberately NOT in this list
        advice_topic_page.page_ptr,
        # NB: article_page is deliberately NOT in this list
    ]


@pytest.mark.skip(reason='We need more of the page tree ported before we can test this.')
def test_base_content_page__ancestors_in_app__involving_folder_pages():
    pass


@pytest.mark.django_db
def test_base_content_page__get_breadcrumbs(
    domestic_homepage,
    domestic_site,
):
    advice_topic_page = TopicLandingPageFactory(
        title='Advice',
        parent=domestic_homepage,
    )

    article_page = ArticlePageFactory(
        article_title='test article',
        parent=advice_topic_page,
    )
    assert article_page.get_breadcrumbs() == [
        # NB: domestic homepage is deliberately NOT in this list
        {
            'title': advice_topic_page.title,
            'url': advice_topic_page.url,
        },
        {
            'title': article_page.title,
            'url': article_page.url,
        }
        # NB: article_page IS in this list
    ]


@pytest.mark.skip(reason='We need more of the page tree ported before we can test this.')
def test_base_content_page__get_breadcrumbs__using_breadcrumbs_label_field():
    pass


class TopicLandingPageTests(SetUpLocaleMixin, WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            TopicLandingPage,
            {
                DomesticHomePage,
                GreatDomesticHomePage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            TopicLandingPage,
            {
                ArticlePage,
                ArticleListingPage,
            },
        )

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')

        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)

        advice_topic_page = TopicLandingPage(
            title='Advice',
        )
        homepage.add_child(instance=advice_topic_page)
        retrieved_page_1 = TopicLandingPage.objects.get(id=advice_topic_page.id)
        self.assertEqual(retrieved_page_1.slug, 'advice')

    def test_child_pages(self):
        advice_topic_page = TopicLandingPageFactory(
            title='Advice',
        )
        article_list_one = ArticleListingPage(
            title='list one',
            landing_page_title='List One',
        )
        article_list_two = ArticleListingPage(
            title='list two',
            landing_page_title='List Two',
        )
        article_list_three = ArticleListingPage(
            title='list three',
            landing_page_title='List Three',
        )

        # note deliberate out-of-sequence ordering here
        advice_topic_page.add_child(instance=article_list_two)
        advice_topic_page.add_child(instance=article_list_one)
        advice_topic_page.add_child(instance=article_list_three)

        advice_topic_page.refresh_from_db()

        self.assertEqual(
            [x for x in advice_topic_page.child_pages()],
            [article_list_two, article_list_one, article_list_three],
        )

        article_list_three.live = False
        article_list_three.save()

        self.assertEqual(
            [x for x in advice_topic_page.child_pages()],
            [article_list_two, article_list_one],
        )


class MarketsTopicLandingPageTests(SetUpLocaleMixin, WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            MarketsTopicLandingPage,
            {
                DomesticHomePage,
                GreatDomesticHomePage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            MarketsTopicLandingPage,
            {CountryGuidePage},
        )

    def test_slug_is_autogenerated(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')

        hello_page = DomesticHomePage(title='Hello world')
        homepage.add_child(instance=hello_page)
        markets_topic_page = MarketsTopicLandingPage(
            title='Markets',
        )
        homepage.add_child(instance=markets_topic_page)
        retrieved_page_2 = MarketsTopicLandingPage.objects.get(
            id=markets_topic_page.id,
        )
        self.assertEqual(retrieved_page_2.slug, 'markets')

    def _make_country_guide_pages(self, parent_page, count):
        _now = tz_now()
        for i in range(count):
            CountryGuidePageFactory(
                parent=parent_page,
                title=f'Test GCP {i}',
                live=True,
                last_published_at=_now - timedelta(minutes=i),
            )

    def test_sort_results(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')
        markets_topic_page = MarketsTopicLandingPage(title='Markets')
        homepage.add_child(instance=markets_topic_page)
        self._make_country_guide_pages(markets_topic_page, 23)

        pages = CountryGuidePage.objects.all()

        # Order by title
        request = RequestFactory().get('/?sortby=title')
        sorted_pages = markets_topic_page.sort_results(
            request,
            pages,
        )

        self.assertEqual(sorted_pages[0], CountryGuidePage.objects.get(title='Test GCP 0'))
        self.assertEqual([x for x in pages.order_by('title')], [y for y in sorted_pages])

        # Last published at
        request = RequestFactory().get('/?sortby=last_published_at')
        sorted_pages = markets_topic_page.sort_results(
            request,
            pages,
        )

        # Note that the results are flipped from ascending to descending to show
        # most recently edited first
        self.assertEqual(sorted_pages[0], pages.order_by('-last_published_at').first())
        self.assertEqual([x for x in pages.order_by('-last_published_at')], [y for y in sorted_pages])

    def test_sort_results__sanitises_input(self):

        mock_pages_queryset = mock.Mock(name='mock_pages_queryset')
        markets_page = MarketsTopicLandingPageFactory()

        for bad_args in (
            '?sortby=body',
            '?sortby=created_at',
            '?sortby=;delete * from auth_user',
            '?sortby=;delete%20*%20from%20auth_user',
            '?other=foo',
        ):
            with self.subTest(bad_args=bad_args):
                mock_pages_queryset.order_by.reset_mock()
                request = RequestFactory().get(f'/{bad_args}')
                markets_page.sort_results(
                    request,
                    mock_pages_queryset,
                )
                # 'title' is the fallback sort_by field
                mock_pages_queryset.order_by.assert_called_once_with('title')

    def test_get_context(self):

        request = RequestFactory().get('/?sortby=last_published_at')

        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')
        markets_topic_page = MarketsTopicLandingPage(title='Markets')
        homepage.add_child(instance=markets_topic_page)

        self._make_country_guide_pages(markets_topic_page, 21)
        output = markets_topic_page.get_context(request)

        self.assertEqual(len(output['paginated_results']), 18)
        self.assertEqual(output['sortby'], 'last_published_at')

    def test_get_context__pagination(self):

        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')
        markets_topic_page = MarketsTopicLandingPage(title='Markets')
        homepage.add_child(instance=markets_topic_page)

        self._make_country_guide_pages(markets_topic_page, 21)
        assert CountryGuidePage.objects.count() == 21

        request = RequestFactory().get('/?page=1')  # 1-18 should be on page 1
        output = markets_topic_page.get_context(request)
        self.assertEqual(len(output['paginated_results']), 18)
        self.assertEqual(
            output['paginated_results'][0],
            CountryGuidePage.objects.first(),
        )
        output = markets_topic_page.get_context(request)

        request = RequestFactory().get('/?page=2')  # 19-21 should be on page 2
        output = markets_topic_page.get_context(request)

        self.assertEqual(len(output['paginated_results']), 3)
        # final result should be the last CGP
        self.assertEqual(
            output['paginated_results'][2],
            CountryGuidePage.objects.order_by('title').last(),
        )

    def test_get_context__handles_paginator_abuse(self):
        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')
        markets_topic_page = MarketsTopicLandingPage(title='Markets')
        homepage.add_child(instance=markets_topic_page)

        self._make_country_guide_pages(markets_topic_page, 21)

        for bad_args in (
            '?page=112312312312413124',  # will raise EmptyPage
            '?page=BAD WORDS',  # will raise PageNotAnInteger
            '?page=;delete * from auth_user',  # will raise PageNotAnInteger
            '?page=;delete%20*%20from%20auth_user',  # will raise PageNotAnInteger
        ):
            with self.subTest(bad_args=bad_args):
                request = RequestFactory().get(f'/{bad_args}')

                output = markets_topic_page.get_context(request)

                self.assertEqual(len(output['paginated_results']), 18)
                # defaults to the first page of results
                self.assertEqual(
                    output['paginated_results'][0],
                    CountryGuidePage.objects.first(),
                )


class MarketsTopicLandingPageFilteringTests(SetUpLocaleMixin, WagtailPageTests):
    fixtures = ['markets_filtering_fixtures.json']

    def setUp(self):
        # Ensure we have the expected data loaded (from the fixture)
        assert core_models.IndustryTag.objects.count() == 42
        assert core_models.Region.objects.count() == 22
        assert core_models.Country.objects.count() == 269

        DomesticHomePageFactory(slug='root')
        homepage = DomesticHomePage.objects.get(url_path='/')
        self.markets_topic_page = MarketsTopicLandingPage(title='Markets')
        homepage.add_child(instance=self.markets_topic_page)

    def _make_simplistic_country_guide_pages(self, parent_page, count):
        for i in range(count):
            CountryGuidePageFactory(
                parent=parent_page,
                title=f'Test GCP {i}',
                live=True,
            )

    def _build_market_guide_for_filtering_tests(self, parent_page):
        self.country_lookup = {}

        for country_name in [
            'Brazil',
            'Australia',
            'France',
            'New Zealand',
            'Germany',
            'United States',
        ]:
            self.country_lookup[country_name] = CountryGuidePageFactory(
                parent=parent_page,
                title=country_name,
                live=True,
                country=core_models.Country.objects.get(
                    name=country_name,
                ),
            )

        _get_tag = core_models.IndustryTag.objects.get

        self.country_lookup['Australia'].tags.add(_get_tag(name='Sport'))
        self.country_lookup['Brazil'].tags.add(_get_tag(name='Aerospace'))
        self.country_lookup['Brazil'].tags.add(_get_tag(name='Engineering'))
        self.country_lookup['France'].tags.add(_get_tag(name='Aerospace'))
        self.country_lookup['France'].tags.add(_get_tag(name='Food and drink'))
        self.country_lookup['France'].tags.add(_get_tag(name='Technology'))
        self.country_lookup['Germany'].tags.add(_get_tag(name='Technology'))
        self.country_lookup['United States'].tags.add(_get_tag(name='Leisure and tourism'))
        self.country_lookup['New Zealand'].tags.add(_get_tag(name='Leisure and tourism'))

        for cgp in self.country_lookup.values():
            cgp.save()  # To persist the tags

    def test_get_relevant_markets__no_filtering(self):
        self._make_simplistic_country_guide_pages(self.markets_topic_page, 23)

        request = RequestFactory().get('/markets/')

        self.assertEqual(
            self.markets_topic_page.get_relevant_markets(request).count(),
            23,
        )

    def test_get_relevant_markets__filtering__single_sector(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?sector=Aerospace')
        results = self.markets_topic_page.get_relevant_markets(request)

        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Brazil'],
                self.country_lookup['France'],
            ],
        )

    def test_get_relevant_markets__filtering__multiple_sectors(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?sector=Aerospace&sector=Technology')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Brazil'],
                self.country_lookup['France'],
                self.country_lookup['Germany'],
            ],
        )

        request = RequestFactory().get('/markets/?sector=Sport&sector=Leisure+and+tourism')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Australia'],
                self.country_lookup['New Zealand'],
                self.country_lookup['United States'],
            ],
        )

    def test_get_relevant_markets__filtering__single_region(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?region=Western+Europe')
        results = self.markets_topic_page.get_relevant_markets(request)

        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['France'],
                self.country_lookup['Germany'],
            ],
        )

    def test_get_relevant_markets__filtering__multiple_regions(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?region=Western+Europe&region=Oceania')
        results = self.markets_topic_page.get_relevant_markets(request)

        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Australia'],
                self.country_lookup['France'],
                self.country_lookup['Germany'],
                self.country_lookup['New Zealand'],
            ],
        )

    def test_get_relevant_markets__filtering__single_region_and_single_sector(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?sector=Aerospace&region=South+America')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Brazil'],
            ],
        )

        request = RequestFactory().get('/markets/?sector=Leisure+and+tourism&region=North+America')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['United States'],
            ],
        )

        request = RequestFactory().get('/markets/?region=Western+Europe&sector=Technology')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['France'],
                self.country_lookup['Germany'],
            ],
        )

    def test_get_relevant_markets__filtering__multiple_regions_and_sectors(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?sector=Aerospace&sector=Sport&region=South+America&region=Oceania')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual(
            [x for x in results],
            [
                self.country_lookup['Australia'],
                self.country_lookup['Brazil'],
            ],
        )

    def test_get_relevant_markets__no_results(self):
        self._build_market_guide_for_filtering_tests(
            parent_page=self.markets_topic_page,
        )
        request = RequestFactory().get('/markets/?sector=Mining')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual([x for x in results], [])

        request = RequestFactory().get('/markets/?region=Antarctica')
        results = self.markets_topic_page.get_relevant_markets(request)
        self.assertEqual([x for x in results], [])


@pytest.mark.django_db
def test_markets_page__no_results__page_content(
    domestic_homepage,
    domestic_site,
    client,
):
    markets_topic_page = MarketsTopicLandingPageFactory(
        title='Markets',
        slug='markets',
        parent=domestic_homepage,
    )

    response = client.get(markets_topic_page.url + '?region=Antarctica')
    soup = BeautifulSoup(response.content, 'html.parser')
    body_text = soup.get_text().replace('  ', '').replace('\n', '')

    # lack of space `inAntarctica` is correct for this test, where we've stripped whitespace
    assert "Currently, we don't have any market guides with information inAntarctica." in body_text

    assert (
        'There are other ways the Department for International Trade '
        'can help you sell your product in an overseas market.'
    ) in body_text

    exopp_link = soup.find('a', attrs={'href': 'http://exred.trade.great:8007/export-opportunities/'})
    assert exopp_link.string == (
        'Browse our export opportunities service to find opportunities to sell your product in overseas markets'
    )

    office_finder_link = soup.find('a', attrs={'href': 'http://exred.trade.great:8007/contact/office-finder'})
    assert office_finder_link.string == 'Get in touch with a trade adviser to discuss your export business plan'

    # Markets links may exist elsewhere in page, make sure at least one is 'Clear all filters'
    market_links = soup.find_all('a', attrs={'href': '/markets/'})

    assert any(link.string == 'Clear all filters' for link in market_links)


class ArticleListingPageTests(SetUpLocaleMixin, WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            ArticleListingPage,
            {
                CountryGuidePage,
                TopicLandingPage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            ArticleListingPage,
            {
                ArticlePage,
            },
        )

    def test_get_articles(self):

        listing_page = ArticleListingPageFactory(
            title='Test listing page',
            landing_page_title='Test Listing Page',
        )
        for i in range(5):
            _title = f'Article {i}'
            ArticlePageFactory(title=_title, article_title=_title, parent=listing_page)

        last_article = ArticlePage.objects.last()

        orphan_article = ArticlePageFactory(
            title='Orphan',
            article_title='Orphan',
            parent=None,
        )

        self.assertEqual(
            # QuerySets are not directly comparable
            [x for x in listing_page.get_articles()],
            [x for x in ArticlePage.objects.exclude(id=orphan_article.id)],
        )

        last_article.live = False
        last_article.save()
        self.assertEqual(
            # QuerySets are not directly comparable
            [x for x in listing_page.get_articles()],
            [
                x
                for x in ArticlePage.objects.exclude(
                    id__in=[orphan_article.id, last_article.id],
                )
            ],
        )

    def test_get_articles_count(self):
        listing_page = ArticleListingPageFactory(
            title='Test listing page',
            landing_page_title='Test Listing Page',
        )
        for i in range(5):
            _title = f'Article {i}'
            ArticlePageFactory(title=_title, article_title=_title, parent=listing_page)

        last_article = ArticlePage.objects.last()

        ArticlePageFactory(
            title='Orphan',
            article_title='Orphan',
            parent=None,
        )

        self.assertEqual(ArticlePage.objects.count(), 6)
        self.assertEqual(listing_page.get_articles_count(), 5)

        last_article.live = False
        last_article.save()
        self.assertEqual(listing_page.get_articles_count(), 4)


class ArticlePageTests(SetUpLocaleMixin, WagtailPageTests):
    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            ArticlePage,
            {
                CountryGuidePage,
                StructuralPage,
                ArticleListingPage,
                TopicLandingPage,
            },
        )

    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            ArticlePage,
            {},
        )

    def test_get_context(self):
        request = RequestFactory().get('/example-path/')

        page = ArticlePageFactory(
            title='Test Article Page',
            article_title='Test Article',
        )

        # ArticlePage subclasses SocialLinksPageMixin, which populates
        # the 'social_links' key in the context
        with mock.patch('domestic.models.build_social_links') as mock_build_social_links:
            output = page.get_context(request=request)

        mock_build_social_links.assert_called_once_with(request, 'Test Article Page')
        assert 'social_links' in output


@pytest.mark.django_db
def test_article_page_get_absolute_url(domestic_site, domestic_homepage, en_locale):
    page = ArticlePageFactory(
        title='Test Article Page',
        article_title='Test Article',
        parent=domestic_homepage,
    )
    assert page.get_url() == '/test-article-page/'

    with override_settings(BASE_URL='https://example.com'):
        assert page.get_absolute_url() == 'https://example.com/test-article-page/'

    #  also confirm trailing slash on BASE_URL is handled
    with override_settings(BASE_URL='https://example.com/'):
        assert page.get_absolute_url() == 'https://example.com/test-article-page/'


@pytest.mark.parametrize(
    'related_page_data',
    (
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article TWO', 'rel_name': 'related_page_two'},
        ),
        (
            {'title': 'Article ONE', 'rel_name': 'related_page_one'},
            {'title': 'Article THREE', 'rel_name': 'related_page_three'},
        ),
        ({'title': 'Article THREE', 'rel_name': 'related_page_three'},),
        (),
    ),
    ids=['three related', 'two related v1', 'two related v2', 'one related', 'no related'],
)
@pytest.mark.django_db
def test_article_page__related_pages(
    related_page_data,
    domestic_homepage,
    domestic_site,
):
    kwargs = {}

    for data in related_page_data:
        kwargs[data['rel_name']] = ArticlePageFactory(article_title=data['title'])

    page = ArticlePageFactory(
        parent=domestic_homepage,
        title='Test Article Page',
        article_title='Test Article',
        **kwargs,
    )
    assert [x for x in page.related_pages] == [x for x in kwargs.values()]


@pytest.mark.django_db
@pytest.mark.parametrize(
    'quote,attribution,role,organisation,organisation_link',
    (
        (
            'Quote here',
            'Alice McTest',
            'CEO',
            'Test Company Name',
            'http://example.com',
        ),
        (
            'Quote here',
            'Alice McTest',
            None,
            'Test Company Name',
            'http://example.com',
        ),
        (
            'Quote here',
            'Alice McTest',
            'CEO',
            'Test Company Name',
            None,
        ),
        (
            'Quote here',
            'Alice McTest',
            'CEO',
            None,
            'http://example.com',  # SHOULD NOT BE RENDERED
        ),
        ('Quote here', 'Alice McTest', 'CEO', None, None),
        ('Quote here', 'Alice McTest', None, None, None),
        ('Quote here', None, None, None, None),
    ),
)
def test_article_body_pull_quote_block(
    domestic_homepage,
    quote,
    attribution,
    role,
    organisation,
    organisation_link,
):
    page = ArticlePageFactory(
        parent=domestic_homepage,
        title='Test Article Page',
        article_title='Test Article',
    )
    page.article_body = json.dumps(
        [
            {
                'type': 'pull_quote',
                'value': {
                    'quote': quote,
                    'attribution': attribution,
                    'role': role,
                    'organisation': organisation,
                    'organisation_link': organisation_link,
                },
            }
        ]
    )
    page.save()

    rendered_block = page.article_body[0].render_as_block()

    for field_ in [quote, attribution, role, organisation]:
        if field_ is not None:
            assert field_ in rendered_block

    if organisation is not None:
        assert organisation in rendered_block
        if organisation_link is not None:
            assert organisation_link in rendered_block

    if organisation_link and not organisation:
        assert organisation_link not in rendered_block


class PerformanceDashboardPageTests(SetUpLocaleMixin, WagtailPageTests):
    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            PerformanceDashboardPage,
            {
                PerformanceDashboardPage,
                GuidancePage,
            },
        )

    def test_get_child_dashboards(self):
        main_dash = PerformanceDashboardPageFactory(
            product_link=service_urls.SERVICES_GREAT_DOMESTIC,
        )

        child_soo = PerformanceDashboardPageFactory(
            product_link=service_urls.SERVICES_SOO,
            parent=main_dash,
        )

        child_invest = PerformanceDashboardPageFactory(
            product_link=service_urls.SERVICES_INVEST,
            parent=main_dash,
        )

        child_exopps = PerformanceDashboardPageFactory(
            product_link=service_urls.SERVICES_EXOPPS,
            parent=main_dash,
        )

        child_fab = PerformanceDashboardPageFactory(
            product_link=service_urls.SERVICES_FAB,
            parent=main_dash,
        )

        self.assertEqual(
            [x for x in main_dash.get_child_dashboards()],
            [
                child_soo,
                child_invest,
                child_exopps,
                child_fab,
            ],
        )

        child_exopps.live = False
        child_exopps.save()

        self.assertEqual(
            [x for x in main_dash.get_child_dashboards()],
            [
                child_soo,
                child_invest,
                child_fab,
            ],
        )


@pytest.mark.django_db
@pytest.mark.parametrize(
    'product_link, expected',
    (
        (
            service_urls.SERVICES_GREAT_DOMESTIC,
            {
                'title': 'Great.gov.uk Performance Dashboard',
                'slug': 'performance-dashboard',
                'heading': 'Great.gov.uk',
                'landing_dashboard': True,
            },
        ),
        (
            service_urls.SERVICES_SOO,
            {
                'title': 'Selling Online Overseas Performance Dashboard',
                'slug': 'selling-online-overseas',
                'heading': 'Selling Online Overseas',
                'landing_dashboard': False,
            },
        ),
        (
            service_urls.SERVICES_EXOPPS,
            {
                'title': 'Export Opportunities Performance Dashboard',
                'slug': 'export-opportunities',
                'heading': 'Export Opportunities',
                'landing_dashboard': False,
            },
        ),
        (
            service_urls.SERVICES_FAB,
            {
                'title': 'Business Profiles Performance Dashboard',
                'slug': 'trade-profiles',
                'heading': 'Business Profiles',
                'landing_dashboard': False,
            },
        ),
        (
            service_urls.SERVICES_INVEST,
            {
                'title': 'Invest in Great Britain Performance Dashboard',
                'slug': 'invest',
                'heading': 'Invest in Great Britain',
                'landing_dashboard': False,
            },
        ),
    ),
)
def test_performance_dashboard_auto_population(product_link, expected, en_locale):
    dash = PerformanceDashboardPageFactory(product_link=product_link)

    for key in ['title', 'heading', 'landing_dashboard', 'slug']:
        assert getattr(dash, key) == expected[key]


def test_all_domestic_models_implement_ga360_mixins():
    from domestic import models as domestic_models

    module_attributes = dir(domestic_models)
    missing_mixin = []

    concrete_models_allowed_not_to_include_mixin = [
        Page,
    ]

    for attr in module_attributes:
        try:
            klass = getattr(domestic_models, attr)
            if (
                Page in klass.mro()
                and klass not in concrete_models_allowed_not_to_include_mixin  # noqa: W503
                and klass._meta.abstract is not True  # noqa: W503
                and DataLayerMixin not in klass.mro()  # noqa: W503
            ):
                missing_mixin.append(klass)
        except AttributeError:
            pass

    if missing_mixin:
        assert False, f'These Domestic pages do not implement the DataLayerMixin, but should: {missing_mixin}'


@override_settings(API_CACHE_DISABLED=True)
class GreatDomesticHomePageTests(SetUpLocaleMixin, WagtailPageTests):
    fixtures = ['markets_filtering_fixtures.json']

    def setUp(self):
        # Ensure we have the expected data loaded (from the fixture)
        self.assertEqual(core_models.IndustryTag.objects.count(), 42)
        self.assertEqual(core_models.Region.objects.count(), 22)
        self.assertEqual(core_models.Country.objects.count(), 269)

        GreatDomesticHomePageFactory(
            slug='root',
            magna_ctas_columns__columns__0__text='test Magna CTA',
            magna_ctas_columns__columns__0__url='/learn/categories/',
            magna_ctas_columns__columns__0__content='<p>Test test</p>',
            magna_ctas_columns__columns__0__image=None,
        )
        self.great_domestic_homepage = GreatDomesticHomePage.objects.get(url_path='/')
        self.markets_topic_page = MarketsTopicLandingPage(title='Markets')
        self.great_domestic_homepage.add_child(instance=self.markets_topic_page)

        assert core_models.IndustryTag.objects.exists()

        cache.clear()

    def tearDown(self):
        cache.clear()
        return super().tearDown()

    def _make_country_guide_pages_with_industry_tags(self, parent_page, count, tags):
        _now = tz_now()
        for i in range(count):
            tag_idx = i % len(tags)
            cgp = CountryGuidePageFactory(
                parent=parent_page,
                title=f'Test GCP {i}',
                live=True,
                last_published_at=_now - timedelta(minutes=i),
            )
            cgp.tags.add(tags[tag_idx])
            cgp.save()

    def test_get_sector_list(self):
        self._make_country_guide_pages_with_industry_tags(
            self.markets_topic_page,
            18,
            [x for x in core_models.IndustryTag.objects.all()[:4]],
            # 5 tagged Advanced manufacturing
            # 5 tagged Aerospace
            # 4 tagged Agri-technology
            # 4 tagged Agriculture
        )

        tag1 = core_models.IndustryTag.objects.get(name='Advanced manufacturing')
        tag2 = core_models.IndustryTag.objects.get(name='Aerospace')
        tag3 = core_models.IndustryTag.objects.get(name='Agri-technology')
        tag4 = core_models.IndustryTag.objects.get(name='Agriculture')

        expected_sector_list = [
            {
                'id': tag1.id,
                'name': tag1.name,
                'icon': tag1.icon,
                'pages_count': 5,
            },
            {
                'id': tag2.id,
                'name': tag2.name,
                'icon': tag2.icon,
                'pages_count': 5,
            },
            {
                'id': tag3.id,
                'name': tag3.name,
                'icon': tag3.icon,
                'pages_count': 4,
            },
            {
                'id': tag4.id,
                'name': tag4.name,
                'icon': tag4.icon,
                'pages_count': 4,
            },
        ]

        # There are also all the other sectors we haven't set up test data for
        for tag in core_models.IndustryTag.objects.all()[4:]:
            expected_sector_list.append(
                {
                    'id': tag.id,
                    'name': tag.name,
                    'icon': tag.icon,
                    'pages_count': 0,
                }
            )
        # Quick check our test data is as expected
        self.assertEqual(
            len(expected_sector_list),
            core_models.IndustryTag.objects.count(),
        )

        request = RequestFactory().get('/')
        self.assertEqual(
            sorted(self.great_domestic_homepage.get_sector_list(request), key=lambda k: k['id']),
            expected_sector_list,
        )

    @override_settings(
        CACHES={
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'KEY_PREFIX': 'test',
            }
        },
    )
    def test_get_sector_list__is_cached(self):

        request = RequestFactory().get('/')
        self.assertFalse(hasattr(request, 'is_preview'))

        # nothing in cache at start
        self.assertEqual(
            cache.get(cache_keys.CACHE_KEY_HOMEPAGE_SECTOR_LIST),
            None,
        )

        output = self.great_domestic_homepage.get_sector_list(request)
        self.assertEqual(
            len(output),
            core_models.IndustryTag.objects.count(),
        )
        # output will have been cached
        self.assertEqual(
            cache.get(cache_keys.CACHE_KEY_HOMEPAGE_SECTOR_LIST),
            output,
        )

    @mock.patch('domestic.models.GreatDomesticHomePage._get_sector_list_uncached')
    def test_get_sector_list__is_not_cached__if_preview(
        self,
        mock_get_sector_list_uncached,
    ):

        mocked_retval = [{'test': 'data'}]
        mock_get_sector_list_uncached.return_value = mocked_retval
        request = RequestFactory().get('/')
        request.is_preview = True  # set by wagtail.core.models.Page.serve_preview()

        self.assertEqual(mock_get_sector_list_uncached.call_count, 0)

        # nothing in cache at start
        self.assertEqual(
            cache.get(cache_keys.CACHE_KEY_HOMEPAGE_SECTOR_LIST),
            None,
        )

        output = self.great_domestic_homepage.get_sector_list(request)

        self.assertEqual(output, mocked_retval)

        self.assertEqual(mock_get_sector_list_uncached.call_count, 1)

        # nothing in cache at end, because preview mode
        self.assertEqual(
            cache.get(cache_keys.CACHE_KEY_HOMEPAGE_SECTOR_LIST),
            None,
        )

    @mock.patch('domestic.models.GreatDomesticHomePage.get_sector_list')
    def test_get_context(self, mock_get_sector_list):

        request = RequestFactory().get('/')

        sector_list_val = [
            # icon k/v pair not needed in this test
            {'id': 11, 'name': 'Sector One', 'pages_count': 3},
            {'id': 2, 'name': 'Sector Two', 'pages_count': 23},
            {'id': 3, 'name': 'Sector Three', 'pages_count': 3},
            {'id': 4, 'name': 'Sector Four', 'pages_count': 19},
            {'id': 5, 'name': 'Sector Five', 'pages_count': 1},
            {'id': 6, 'name': 'Sector Six', 'pages_count': 1},
            {'id': 7, 'name': 'Sector Seven', 'pages_count': 2},
            {'id': 8, 'name': 'Sector Eight', 'pages_count': 2},
        ]

        mock_get_sector_list.return_value = sector_list_val

        context = self.great_domestic_homepage.get_context(request=request)

        expected_sorted_sectors = [
            {'id': 2, 'name': 'Sector Two', 'pages_count': 23},
            {'id': 4, 'name': 'Sector Four', 'pages_count': 19},
            {'id': 11, 'name': 'Sector One', 'pages_count': 3},
            {'id': 3, 'name': 'Sector Three', 'pages_count': 3},
            {'id': 7, 'name': 'Sector Seven', 'pages_count': 2},
            {'id': 8, 'name': 'Sector Eight', 'pages_count': 2},
            {'id': 5, 'name': 'Sector Five', 'pages_count': 1},
            {'id': 6, 'name': 'Sector Six', 'pages_count': 1},
        ]

        self.assertEqual(context['sorted_sectors'], expected_sorted_sectors)

        expected_top_sectors = [
            {'id': 2, 'name': 'Sector Two', 'pages_count': 23},
            {'id': 4, 'name': 'Sector Four', 'pages_count': 19},
            {'id': 11, 'name': 'Sector One', 'pages_count': 3},
            {'id': 3, 'name': 'Sector Three', 'pages_count': 3},
            {'id': 7, 'name': 'Sector Seven', 'pages_count': 2},
            {'id': 8, 'name': 'Sector Eight', 'pages_count': 2},
        ]
        self.assertEqual(context['top_sectors'], expected_top_sectors)

        expected_sector_form = SectorPotentialForm(
            sector_list=sorted(
                sector_list_val,
                key=lambda x: x['name'],
            ),
        )

        self.assertEqual(
            context['sector_form'].__class__,
            expected_sector_form.__class__,
        )

        self.assertEqual(
            context['sector_form'].fields['sector'].choices,
            expected_sector_form.fields['sector'].choices,
        )


@pytest.mark.django_db
@pytest.mark.parametrize(
    'ip,expected_target_lang',
    (
        ('221.194.47.204', 'zh-hans'),
        ('144.76.204.44', 'de'),
        ('195.12.50.155', 'es'),
        ('110.50.243.6', 'ja'),
        ('213.121.43.1', None),  # a UK IP address (bt.com)
    ),
)
def test_great_domestic_homepage_geo_redirection__integration(
    root_page,
    client,
    ip,
    expected_target_lang,
):
    homepage = GreatDomesticHomePageFactory(
        parent=root_page,
        slug='root',
    )
    SiteFactory(
        root_page=homepage,
        hostname=client._base_environ()['SERVER_NAME'],
    )

    response = client.get(homepage.url, REMOTE_ADDR=ip)

    if expected_target_lang is not None:
        assert response.status_code == 302
        assert response._headers['location'] == ('Location', f'/international/?lang={expected_target_lang}')
    else:
        assert response.status_code == 200


@pytest.mark.django_db
def test_great_domestic_homepage_magna_ctas_labels(root_page, client, user):
    # Show that the CTAs to Magna/personalised content only have labels shown
    # to signed-out users
    homepage = GreatDomesticHomePageFactory(
        parent=root_page,
        slug='root',
    )

    SiteFactory(
        root_page=homepage,
        hostname=client._base_environ()['SERVER_NAME'],
    )

    homepage.magna_ctas_columns = [
        (
            'columns',
            dict(
                text='test Magna CTA',
                url='/learn/categories/',
                content=RichText('<p>Test test</p>'),
                image=None,
            ),
        )
    ]
    homepage.save()

    for user_logged_in in (False, True):

        if user_logged_in:
            client.force_login(user)

        response = client.get(homepage.url)

        assert b'<p>Test test</p>' in response.content
        if not user_logged_in:
            assert b'<span class="shared-tag">Sign in required</span>' in response.content
        else:
            assert b'<span class="shared-tag">Sign in required</span>' not in response.content


class StructuralPageTests(WagtailPageTests):
    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            StructuralPage,
            {
                ArticlePage,
            },
        )


class TradeFinancePageTests(WagtailPageTests):
    def test_allowed_children(self):
        self.assertAllowedSubpageTypes(
            TradeFinancePage,
            {},
        )

    def test_allowed_parents(self):
        self.assertAllowedParentPageTypes(
            TradeFinancePage,
            {
                GreatDomesticHomePage,
            },
        )
